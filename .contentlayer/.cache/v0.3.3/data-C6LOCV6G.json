{
  "cacheItemsMap": {
    "array-methods-in-javascript.mdx": {
      "document": {
        "title": "Array Methods in JavaScript",
        "subtitle": "Common and useful methods on JavaScript's Array prototype",
        "date": "2019-12-23T05:00:00.000Z",
        "body": {
          "raw": "\nA few months ago, I gave a Lunch and Learn talk at work about some common methods and patterns for working with arrays in JavaScript. I had noticed some common confusion among some of the junior engineers on my team when working with collections of data, so I decided to collect some patterns and present them to team at large.\n\nThis post is a written adaptation of that talk. The original format for that talk was a walk through of the README and JavaScript files located in [this repo](https://github.com/kpollich/array-methods). There's also a quiz to test your array knowledge!\n\n# Intro - What are arrays?\n\nIf you're new to programming or JavaScript, you might not be completely sure what an array is. An array is the term that JavaScript uses for a list or collection of data. They look like this:\n\n```js\nconst fruits = [\"Strawberry\", \"Banana\", \"Apple\"];\n```\n\nDealing with arrays is very common in JavaScript development. Whether you're working with data from a REST API endpoint or the DOM, it's very likely that you'll often be working with collections of values or objects.\n\n# Native Array Methods\n\nJavaScript arrays have a bunch of native methods defined on the [Array prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). Because these methods are defined on the Array prototype, any Array will have access to these methods. This is the same for properties defined on the prototype, like `.length`.\n\n```js\nconst myFriends = [\"Jane\", \"John\", \"Joe\"];\n\n// Array.prototype.length\nconsole.log(myFriends.length); // 3\n```\n\nHaving a working knowledge of these native methods is great for improving your effectiveness and productivity with JavaScript. I'd definitely suggest reading over the [Array docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) from MDN, and taking a look at all the different array methods and examples there.\n\n# Why learn these methods?\n\n## Availability\n\nThese methods are always available to you. They're like a tool belt that comes for free whenever you're working in a JavaScript environment. JavaScript might not have a standard library ([yet](https://github.com/tc39/proposal-javascript-standard-library)), but it does provide lots of methods natively on its various prototypes like Array and Object.\n\n## Declarative\n\nJavaScript's native array methods are highly _[declarative](https://tylermcginnis.com/imperative-vs-declarative-programming/)_ as opposed to _imperative_. They tell the computer what to do, rather than how to do it. Because of this, complex chains of logic can be represented more succinctly or coherently with these methods as opposed to a big chain of nested `for` loops and `if` statements. That's not to say that `for` loops and `if` statements don't have their places, though!\n\n# forEach()\n\nThe first method we're going to take a look at is `.forEach()`. From the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n\n> The forEach() method executes a provided function once for each array element.\n\nSo, the `forEach()` method is called on any array, and accepts a [callback function](https://developer.mozilla.org/en-US/docs/Glossary/Callback_function) that will receive each element as its first argument. It looks like this, in practice:\n\n```js\nconst toys = [\"Truck\", \"Doll\", \"Ball\"];\n\ntoys.forEach((toy) => {\n  console.log(`You're getting a ${toy} for your birthday this year!`);\n});\n\n// Output:\n// You're getting a Truck for your birthday this year!\n// You're getting a Doll for your birthday this year!\n// You're getting a Ball for your birthday this year!\n```\n\nThe most common use case for `forEach()` is executing some code for each element of an array where the result of that execution either doesn't exist or doesn't matter. In our example above, we're outputting a string of text to the console, but we're not returning any data or calculating any new values based on the array's elements.\n\n`forEach()` is also useful for _mutating_ the original array. Mutations can sound a little scary, but sometimes they are necessary or even preferred. For instance, adding a new property to each object in an array of objects is a good use case for `forEach()`:\n\n```js\nconst users = [\n  { id: 1, name: \"Steph\"},\n  { id: 2, name: \"Steve}\n]\n\nusers.forEach(user => user.username = user.name + user.id)\n\nconsole.log(users)\n\n// Output:\n// [\n//   { id: 1, name: 'Steph', username: 'Steph1' },\n//   { id: 2, name: 'Steve', username: 'Steve2' }\n// ]\n```\n\nAs a learning exercise, let's re-implement each array method as we go. We'll keep things simple, and we won't handle edge cases or optional parameters like the real JavaScript methods do for simplicity's sake. Here's what our own `forEach()` might look like:\n\n```js\nfunction myForEach(array, callback) {\n  for (let i = 0; i < array.length; i++) {\n    callback(array[i]);\n  }\n}\n\nconst sides = [\"Fries\", \"Chips\", \"Salad\"];\nmyForEach(sides, (side) => console.log(side));\n\n// Output:\n// Fries\n// Chips\n// Salad\n```\n\nAt their core, a lot of these native array methods are syntactic sugar for common operation involving `for` loops like this. By creating named methods and accepting a callback, JavaScript can provide a robust, declarative interface for working with arrays, rather than leaving everything up to the user to implement imperatively.\n\n# map()\n\n`map()` is a method used for deriving a new array from another array. From [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\n> The map() method creates a new array with the results of calling a provided function on every element in the calling array.\n\n`map()` is most commonly used for transforming array data into a new structure, or running some sort of calculation on every element of an array. For instance, let's try doubling each number in an array with `map()`:\n\n```js\nconst numbers = [1, 2, 3, 4];\nconst doubledNumbers = numbers.map((number) => number * 2);\n\nconsole.log(doubledNumbers); // [2, 4, 6, 8]\nconsole.log(numbers); // [1, 2, 3, 4]\n```\n\nNotice how the original `numbers` array is untouched. This is because `map` returns a new array, rather than mutating the original. Mutations are a common source of bugs or unintended behavior in programming, so avoiding mutations unless explicitly necessary is typically a good practice.\n\nLet's write our own `map()` method like we did with `forEach()` above.\n\n```js\nfunction myMap(array, callback) {\n  const results = [];\n\n  for (let i = 0; i < array.length; i++) {\n    const result = callback(array[i]);\n    results.push(result);\n  }\n\n  return results;\n}\n\nconst numbers = [1, 2, 3, 4];\nconst squaredNumbers = myMap(numbers, (number) => number * number);\n\nconsole.log(squaredNumbers); // [1, 4, 9, 16]\n```\n\n# filter()\n\n`filter()` is a very well named method. It's used to filter down an array to a new array that contains only the elements that pass some condition. From [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter):\n\n> The filter() method creates a new array with all elements that pass the test implemented by the provided function.\n\nLet's stick with the list of numbers we used in our `map()` examples above, and try filtering down to only the even numbers.\n\n```js\nconst numbers = [1, 2, 3, 4];\n\nconst evens = numbers.filter((number = number % 2 === 0));\nconsole.log(evens); // [2, 4]\n```\n\nEvery time the callback function returns `true`, the element will be added to our resulting array. With that implementation in mind, let's create our own `filter()` as we did with the other array methods:\n\n```js\nfunction myFilter(array, callback) {\n  const results = [];\n\n  for (let i = 0; i < array.length; i++) {\n    const element = array[i];\n\n    if (callback(element)) {\n      results.push(element);\n    }\n  }\n\n  return results;\n}\n\nconst numbers = [1, 2, 3, 4];\nconst odds = myFilter(numbers, (number) => number % 2 !== 0);\n\nconsole.log(odds); // [1, 3]\n```\n\n# reduce()\n\n`reduce()` is perhaps the most complex of these standard array methods. Here's MDN's description:\n\n> The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.\n\nThe most common example of a use case for \"reduce\" is calculating the sum of all elements in an array. In this case, we're \"reducing\" many elements of an array into a single value: the sum. The signature for the \"reducer\" callback is a `function` that accepts an \"accumulator\" (the current value of the resulting single value) and the current element. It's common to see these arguments represented as `acc` and `curr` or similar. `reduce()` also accepts a second argument for the initial value of the accumulator. Let's take a look at our \"sum of array elements\" use case in code:\n\n```js\nconst numbers = [2, 4, 6, 8];\n\nconst sum = numbers.reduce((acc, curr) => {\n  return acc + curr;\n}, 0);\n\n// Or, with shorthand\nconst sum2 = numbers.reduce((sum, num) => sum + num, 0);\n\nconsole.log(sum); // 20\n```\n\n`reduce()` is useful for aggregating data about an array. For instance, determining the unique values for some string, and calculating how many times each value appears. Because of its relative complexity, workflows involving `reduce()` may often be represented more coherently with standard loops or a `forEach()`. Let's compare/contract an aggregation workflow with a plain loop and `reduce()` below:\n\n```js\n// Let's say we want to derive a new data structure from this array of users.\n// We want an object keyed by email, where each value is an array of\n// the user's post titles\nconst users = [\n  {\n    id: 1,\n    email: \"user@yahoo.com\",\n    posts: [{ title: \"Nope\", category: \"News\" }],\n  },\n  {\n    id: 2,\n    email: \"user@gmail.com\",\n    posts: [\n      { title: \"Good Post\", category: \"Fishing and Hunting\" },\n      { title: \"Another good one\", category: \"Topiaries\" },\n    ],\n  },\n  {\n    id: 3,\n    email: \"user2@gmail.com\",\n    posts: [\n      { title: \"Best Post Ever!\", category: \"Construction\" },\n      { title: \"A post\", category: \"Starbucks Secret Menu\" },\n    ],\n  },\n];\n\n// Plain loop implementation\nconst result1 = {};\nfor (const user of users) {\n  result[user.email] = user.posts;\n}\n\n// Reduce implementation\nconst result2 = users.reduce((acc, curr) => {\n  acc[user.email] = user.posts;\n\n  return acc;\n}, {});\n```\n\n`reduce()` is definitely the array method that's most conducive to overly clever code, but for succinct workflows it can still be an expressive method.\n\n# Others\n\nThere are a few other Array methods that are commonly used, and are a bit more straightforward than those we've looked at above. It's time for a ⚡lightning round ⚡!\n\n```js\n// `.some` - return true as long as at least one element satisfies the condition\n// returned by the callback\nconst hasEvenNumber = [1, 2, 3, 4].some((num) => num % 2 === 0);\nconsole.log(hasEvenNumber); // true\n\n// `.every` - return true as long as ALL elements satisfy the condition returned by the callback\nconst allEven = [2, 4, 6, 8].every((num) => num % 2 === 0);\nconsole.log(allEven); // true\n\n// `.find` - return the first value that satifsies the condition returned by the callback\nconst firstEven = [1, 2, 3, 4].find((num) => num % 2 === 0);\nconsole.log(firstEven); // 2\n\n// `.includes` - return true if the value is present in the array\nconst hasTwo = [1, 2, 3, 4].includes(2);\nconsole.log(hasTwo); // true\n```\n\n# Further Reading\n\nIf you're interested in flexing your Array knowledge, I provided a [quiz](https://github.com/kpollich/array-methods/blob/9d0666a44680ee892910e223cc930aa95b958e82/quiz.test.js) when I gave this blog post as a talk at work. You can clone the GitHub repo, and attempt to update that test file and make all the tests pass.\n\n- [MDN's documentation on Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\n- [Sarah Drasner's Array Explorer](https://sdras.github.io/array-explorer/)\n- [Syntax.fm episode on Array + Object methods](https://syntax.fm/show/043/20-javascript-array-and-object-methods-to-make-you-a-better-developer)\n",
          "html": "<p>A few months ago, I gave a Lunch and Learn talk at work about some common methods and patterns for working with arrays in JavaScript. I had noticed some common confusion among some of the junior engineers on my team when working with collections of data, so I decided to collect some patterns and present them to team at large.</p>\n<p>This post is a written adaptation of that talk. The original format for that talk was a walk through of the README and JavaScript files located in <a href=\"https://github.com/kpollich/array-methods\">this repo</a>. There's also a quiz to test your array knowledge!</p>\n<h1>Intro - What are arrays?</h1>\n<p>If you're new to programming or JavaScript, you might not be completely sure what an array is. An array is the term that JavaScript uses for a list or collection of data. They look like this:</p>\n<pre><code class=\"language-js\">const fruits = [\"Strawberry\", \"Banana\", \"Apple\"];\n</code></pre>\n<p>Dealing with arrays is very common in JavaScript development. Whether you're working with data from a REST API endpoint or the DOM, it's very likely that you'll often be working with collections of values or objects.</p>\n<h1>Native Array Methods</h1>\n<p>JavaScript arrays have a bunch of native methods defined on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array prototype</a>. Because these methods are defined on the Array prototype, any Array will have access to these methods. This is the same for properties defined on the prototype, like <code>.length</code>.</p>\n<pre><code class=\"language-js\">const myFriends = [\"Jane\", \"John\", \"Joe\"];\n\n// Array.prototype.length\nconsole.log(myFriends.length); // 3\n</code></pre>\n<p>Having a working knowledge of these native methods is great for improving your effectiveness and productivity with JavaScript. I'd definitely suggest reading over the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array docs</a> from MDN, and taking a look at all the different array methods and examples there.</p>\n<h1>Why learn these methods?</h1>\n<h2>Availability</h2>\n<p>These methods are always available to you. They're like a tool belt that comes for free whenever you're working in a JavaScript environment. JavaScript might not have a standard library (<a href=\"https://github.com/tc39/proposal-javascript-standard-library\">yet</a>), but it does provide lots of methods natively on its various prototypes like Array and Object.</p>\n<h2>Declarative</h2>\n<p>JavaScript's native array methods are highly <em><a href=\"https://tylermcginnis.com/imperative-vs-declarative-programming/\">declarative</a></em> as opposed to <em>imperative</em>. They tell the computer what to do, rather than how to do it. Because of this, complex chains of logic can be represented more succinctly or coherently with these methods as opposed to a big chain of nested <code>for</code> loops and <code>if</code> statements. That's not to say that <code>for</code> loops and <code>if</code> statements don't have their places, though!</p>\n<h1>forEach()</h1>\n<p>The first method we're going to take a look at is <code>.forEach()</code>. From the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">MDN docs</a></p>\n<blockquote>\n<p>The forEach() method executes a provided function once for each array element.</p>\n</blockquote>\n<p>So, the <code>forEach()</code> method is called on any array, and accepts a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\">callback function</a> that will receive each element as its first argument. It looks like this, in practice:</p>\n<pre><code class=\"language-js\">const toys = [\"Truck\", \"Doll\", \"Ball\"];\n\ntoys.forEach((toy) => {\n  console.log(`You're getting a ${toy} for your birthday this year!`);\n});\n\n// Output:\n// You're getting a Truck for your birthday this year!\n// You're getting a Doll for your birthday this year!\n// You're getting a Ball for your birthday this year!\n</code></pre>\n<p>The most common use case for <code>forEach()</code> is executing some code for each element of an array where the result of that execution either doesn't exist or doesn't matter. In our example above, we're outputting a string of text to the console, but we're not returning any data or calculating any new values based on the array's elements.</p>\n<p><code>forEach()</code> is also useful for <em>mutating</em> the original array. Mutations can sound a little scary, but sometimes they are necessary or even preferred. For instance, adding a new property to each object in an array of objects is a good use case for <code>forEach()</code>:</p>\n<pre><code class=\"language-js\">const users = [\n  { id: 1, name: \"Steph\"},\n  { id: 2, name: \"Steve}\n]\n\nusers.forEach(user => user.username = user.name + user.id)\n\nconsole.log(users)\n\n// Output:\n// [\n//   { id: 1, name: 'Steph', username: 'Steph1' },\n//   { id: 2, name: 'Steve', username: 'Steve2' }\n// ]\n</code></pre>\n<p>As a learning exercise, let's re-implement each array method as we go. We'll keep things simple, and we won't handle edge cases or optional parameters like the real JavaScript methods do for simplicity's sake. Here's what our own <code>forEach()</code> might look like:</p>\n<pre><code class=\"language-js\">function myForEach(array, callback) {\n  for (let i = 0; i &#x3C; array.length; i++) {\n    callback(array[i]);\n  }\n}\n\nconst sides = [\"Fries\", \"Chips\", \"Salad\"];\nmyForEach(sides, (side) => console.log(side));\n\n// Output:\n// Fries\n// Chips\n// Salad\n</code></pre>\n<p>At their core, a lot of these native array methods are syntactic sugar for common operation involving <code>for</code> loops like this. By creating named methods and accepting a callback, JavaScript can provide a robust, declarative interface for working with arrays, rather than leaving everything up to the user to implement imperatively.</p>\n<h1>map()</h1>\n<p><code>map()</code> is a method used for deriving a new array from another array. From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">MDN</a></p>\n<blockquote>\n<p>The map() method creates a new array with the results of calling a provided function on every element in the calling array.</p>\n</blockquote>\n<p><code>map()</code> is most commonly used for transforming array data into a new structure, or running some sort of calculation on every element of an array. For instance, let's try doubling each number in an array with <code>map()</code>:</p>\n<pre><code class=\"language-js\">const numbers = [1, 2, 3, 4];\nconst doubledNumbers = numbers.map((number) => number * 2);\n\nconsole.log(doubledNumbers); // [2, 4, 6, 8]\nconsole.log(numbers); // [1, 2, 3, 4]\n</code></pre>\n<p>Notice how the original <code>numbers</code> array is untouched. This is because <code>map</code> returns a new array, rather than mutating the original. Mutations are a common source of bugs or unintended behavior in programming, so avoiding mutations unless explicitly necessary is typically a good practice.</p>\n<p>Let's write our own <code>map()</code> method like we did with <code>forEach()</code> above.</p>\n<pre><code class=\"language-js\">function myMap(array, callback) {\n  const results = [];\n\n  for (let i = 0; i &#x3C; array.length; i++) {\n    const result = callback(array[i]);\n    results.push(result);\n  }\n\n  return results;\n}\n\nconst numbers = [1, 2, 3, 4];\nconst squaredNumbers = myMap(numbers, (number) => number * number);\n\nconsole.log(squaredNumbers); // [1, 4, 9, 16]\n</code></pre>\n<h1>filter()</h1>\n<p><code>filter()</code> is a very well named method. It's used to filter down an array to a new array that contains only the elements that pass some condition. From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">MDN</a>:</p>\n<blockquote>\n<p>The filter() method creates a new array with all elements that pass the test implemented by the provided function.</p>\n</blockquote>\n<p>Let's stick with the list of numbers we used in our <code>map()</code> examples above, and try filtering down to only the even numbers.</p>\n<pre><code class=\"language-js\">const numbers = [1, 2, 3, 4];\n\nconst evens = numbers.filter((number = number % 2 === 0));\nconsole.log(evens); // [2, 4]\n</code></pre>\n<p>Every time the callback function returns <code>true</code>, the element will be added to our resulting array. With that implementation in mind, let's create our own <code>filter()</code> as we did with the other array methods:</p>\n<pre><code class=\"language-js\">function myFilter(array, callback) {\n  const results = [];\n\n  for (let i = 0; i &#x3C; array.length; i++) {\n    const element = array[i];\n\n    if (callback(element)) {\n      results.push(element);\n    }\n  }\n\n  return results;\n}\n\nconst numbers = [1, 2, 3, 4];\nconst odds = myFilter(numbers, (number) => number % 2 !== 0);\n\nconsole.log(odds); // [1, 3]\n</code></pre>\n<h1>reduce()</h1>\n<p><code>reduce()</code> is perhaps the most complex of these standard array methods. Here's MDN's description:</p>\n<blockquote>\n<p>The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</p>\n</blockquote>\n<p>The most common example of a use case for \"reduce\" is calculating the sum of all elements in an array. In this case, we're \"reducing\" many elements of an array into a single value: the sum. The signature for the \"reducer\" callback is a <code>function</code> that accepts an \"accumulator\" (the current value of the resulting single value) and the current element. It's common to see these arguments represented as <code>acc</code> and <code>curr</code> or similar. <code>reduce()</code> also accepts a second argument for the initial value of the accumulator. Let's take a look at our \"sum of array elements\" use case in code:</p>\n<pre><code class=\"language-js\">const numbers = [2, 4, 6, 8];\n\nconst sum = numbers.reduce((acc, curr) => {\n  return acc + curr;\n}, 0);\n\n// Or, with shorthand\nconst sum2 = numbers.reduce((sum, num) => sum + num, 0);\n\nconsole.log(sum); // 20\n</code></pre>\n<p><code>reduce()</code> is useful for aggregating data about an array. For instance, determining the unique values for some string, and calculating how many times each value appears. Because of its relative complexity, workflows involving <code>reduce()</code> may often be represented more coherently with standard loops or a <code>forEach()</code>. Let's compare/contract an aggregation workflow with a plain loop and <code>reduce()</code> below:</p>\n<pre><code class=\"language-js\">// Let's say we want to derive a new data structure from this array of users.\n// We want an object keyed by email, where each value is an array of\n// the user's post titles\nconst users = [\n  {\n    id: 1,\n    email: \"user@yahoo.com\",\n    posts: [{ title: \"Nope\", category: \"News\" }],\n  },\n  {\n    id: 2,\n    email: \"user@gmail.com\",\n    posts: [\n      { title: \"Good Post\", category: \"Fishing and Hunting\" },\n      { title: \"Another good one\", category: \"Topiaries\" },\n    ],\n  },\n  {\n    id: 3,\n    email: \"user2@gmail.com\",\n    posts: [\n      { title: \"Best Post Ever!\", category: \"Construction\" },\n      { title: \"A post\", category: \"Starbucks Secret Menu\" },\n    ],\n  },\n];\n\n// Plain loop implementation\nconst result1 = {};\nfor (const user of users) {\n  result[user.email] = user.posts;\n}\n\n// Reduce implementation\nconst result2 = users.reduce((acc, curr) => {\n  acc[user.email] = user.posts;\n\n  return acc;\n}, {});\n</code></pre>\n<p><code>reduce()</code> is definitely the array method that's most conducive to overly clever code, but for succinct workflows it can still be an expressive method.</p>\n<h1>Others</h1>\n<p>There are a few other Array methods that are commonly used, and are a bit more straightforward than those we've looked at above. It's time for a ⚡lightning round ⚡!</p>\n<pre><code class=\"language-js\">// `.some` - return true as long as at least one element satisfies the condition\n// returned by the callback\nconst hasEvenNumber = [1, 2, 3, 4].some((num) => num % 2 === 0);\nconsole.log(hasEvenNumber); // true\n\n// `.every` - return true as long as ALL elements satisfy the condition returned by the callback\nconst allEven = [2, 4, 6, 8].every((num) => num % 2 === 0);\nconsole.log(allEven); // true\n\n// `.find` - return the first value that satifsies the condition returned by the callback\nconst firstEven = [1, 2, 3, 4].find((num) => num % 2 === 0);\nconsole.log(firstEven); // 2\n\n// `.includes` - return true if the value is present in the array\nconst hasTwo = [1, 2, 3, 4].includes(2);\nconsole.log(hasTwo); // true\n</code></pre>\n<h1>Further Reading</h1>\n<p>If you're interested in flexing your Array knowledge, I provided a <a href=\"https://github.com/kpollich/array-methods/blob/9d0666a44680ee892910e223cc930aa95b958e82/quiz.test.js\">quiz</a> when I gave this blog post as a talk at work. You can clone the GitHub repo, and attempt to update that test file and make all the tests pass.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">MDN's documentation on Arrays</a></li>\n<li><a href=\"https://sdras.github.io/array-explorer/\">Sarah Drasner's Array Explorer</a></li>\n<li><a href=\"https://syntax.fm/show/043/20-javascript-array-and-object-methods-to-make-you-a-better-developer\">Syntax.fm episode on Array + Object methods</a></li>\n</ul>"
        },
        "_id": "array-methods-in-javascript.mdx",
        "_raw": {
          "sourceFilePath": "array-methods-in-javascript.mdx",
          "sourceFileName": "array-methods-in-javascript.mdx",
          "sourceFileDir": ".",
          "contentType": "mdx",
          "flattenedPath": "array-methods-in-javascript"
        },
        "type": "Post",
        "url": "/blog/array-methods-in-javascript"
      },
      "documentHash": "1687402042559",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "async-patterns-in-js.mdx": {
      "document": {
        "title": "Async patterns in JavaScript",
        "subtitle": "A brief history of asynchronous programming in JavaScript",
        "date": "2018-03-25T04:00:00.000Z",
        "body": {
          "raw": "\nJavaScript is regularly referred to as \"async by default\", but the way in which async code is commonly handled has changed over JavaScript's lifetime. We've moved from **callbacks** to **promises** to **async/await** over the years, but each of these approaches in related to its predecessors in one way or another.\n\n## Asynchronous vs Synchronous\n\nTo begin, let's quickly make clear the difference between asynchronous and synchronous code. When code is synchronous, it's executed in \"line order\", meaning each task defined by your code is executed to completion before moving onto the next task. In JavaScript, that might mean something like this.\n\n```js\nconsole.log(\"Hello world\");\n\nconst name = \"kyle\";\nconsole.log(\"It's me, \" + name);\n\nconsole.log(\"Some lovely code :)\");\n```\n\nAll of this code executes synchronously - each line is executed to completion before the program moves to the next line.\n\nAsynchronous programming works in the opposite way though: the program moves to the next line _before_ the previous line has executed to completion. We'll dig into some example throughout this post, but common cases involving asynchronous code are database connections, HTTP requests, and other instances where your program might have to wait for a response from some other source.\n\nHere's a great [StackOverflow](https://stackoverflow.com/questions/748175/asynchronous-vs-synchronous-execution-what-does-it-really-mean/26804844#26804844) answer that does a good ELI5 for the difference:\n\n> SYNCHRONOUS <br/>\n> You are in a queue to get a movie ticket. You cannot get one until everybody in front of you gets one, and the same applies to the people queued behind you. <br /> <br />\n> ASYNCHRONOUS <br />\n> You are in a restaurant with many other people. You order your food. Other people can also order their food, they don't have to wait for your food to be cooked and served to you before they can order. In the kitchen restaurant workers are continuously cooking, serving, and taking orders. People will get their food served as soon as it is cooked. <br />\n\nWith (hopefully) a good baseline understanding of these programming concepts, let's dive into how JavaScript has handled asynchronous code throughout its lifetime as a programming language.\n\n## Callbacks\n\nCallbacks are an essential concept in JavaScript and other asynchronous languages. Because JavaScript relies heavily on event and asynchronous processing, callbacks are core to the language. JavaScript implements [higher order functions](https://eloquentjavascript.net/05_higher_order.html#h_xxCc98lOBK), meaning that functions can be stored in named variables and passed as arguments to other functions. A function passed as an argument to another function is typically referred to as a callback. Callbacks are the original and oldest way to handle async calls in JavaScript.\n\n`setTimeout` is one of the simplest examples of a function that accepts a callback:\n\n```js\nsetTimeout(function () {\n  console.log(\"It has been a second!\");\n}, 1000);\n```\n\nHere's an example of how you might implement your own method that accepts a callback:\n\n```js\nfunction validateInput(input, callback) {\n  var result = { errors: [] };\n\n  if (!input.name || input.name.length < 6) {\n    result.errors.push(\"Invalid name\");\n  }\n\n  if (!input.email) {\n    result.errors.push(\"Email must be provided\");\n  }\n\n  callback(result);\n}\n\nvalidateInput({ name: \"Kyle\", email: \"kyle@example.com\" }, function (result) {\n  if (result.errors.length) {\n    console.error(\"Whoops\");\n  } else {\n    console.log(\"Hooray\");\n  }\n});\n```\n\nIt's very easy to fall into [\"callback hell\"](http://callbackhell.com/) when you have to chain several functions together that all accept callbacks. Consider some Node code where we connect to MySQL and use standard callbacks to run some queries that depend on return values from other queries.\n\n```js\nvar config = require('./config.json')\nvar mysql = require('mysql')\n\n// Note: this is inefficient and bad on purpose to prove a point :)\nfunction updateUserEmail (oldEmail, newEmail, callback) {\n  var connection = mysql.createConnection(config)\n\n  connection.connect()\n\n  connection.query('SELECT id FROM users WHERE email = ?', [oldEmail], function (error, results) {\n    if (error) {\n      throw(error)\n    }\n\n    var userId = results[0].id\n\n    connection.query('SELECT is_active FROM users WHERE user_id = ?', [userId], function (error, results) {\n      if (error) {\n        throw(error)\n      }\n\n      var isActive = results[0].is_active\n\n      if (!isActive) {\n        throw new Error('Error - user is inactive')\n      }\n\n      connection.query('UPDATE users SET email = ? WHERE id = ?', [newEmail, userId], function (error, results) {\n        if (error) {\n          throw(error)\n        }\n\n        if (results[0].affectedRows === 0) {\n          throw new Error('Error - failed to update user')\n        }\n\n        connection.query('SELECT * FROM users WHERE id = ?' [userId], function (error, results) {\n          if (error) {\n            throw(error)\n          }\n\n          callback(results[0])\n        })\n      })\n    }\n  })\n\n  connection.end()\n}\n\ntry {\n  updateUserEmail('kyle@example.com', 'kyle2@example.com', function(changedUser) {\n    console.log(changedUser)\n  })\n} catch (error) {\n  console.error(error)\n}\n```\n\n## Promises\n\nA `Promise` is an object that represents the eventual result of an async operation. Promises can be `resolved` or `rejected` with values, and they're similar to `Tasks` or `Futures` in other languages like C# or Java.\n\nWe can instantiate a `Promise` with a constructor that takes a function like so\n\n```js\nnew Promise((resolve, reject) => {\n  if (foo) {\n    return resolve(\"foo\");\n  }\n\n  reject(\"not foo\");\n});\n```\n\nPromises transition through three states: `pending`, `fulfilled`, and `rejected`. We can chain onto Promises to perform meaningful operations with the `then` method. The `catch` method is used to catch rejections.\n\n```js\nsomePromise(foo)\n  .then((data) => {\n    console.log(data);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n```\n\nPromises can be chained, and errors will \"bubble up\" to a single `catch` handler at the end, which makes them very powerful for reducing nesting and unifying your scope.\n\n```js\nsomePromise(foo)\n  .then((data) => {\n    return transformData(data);\n  })\n  .then((newData) => {\n    if (newData.bar) {\n      return logData(newData);\n    }\n\n    return logSomethingElse(newData);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n```\n\nPromises are a powerful pattern for cleaning up callback-laden code. Here's the example with the MySQL calls from above rewritten with Promises.\n\n```js\nconst config = require('./config.json')\nconst mysql = require('mysql2/promise')\n\nfunction updateUserEmail (oldEmail, newEmail ) {\n  mysql.createConnection(config)\n    .then(connection => connection.execute('SELECT id FROM users WHERE email = ?', [oldEmail])\n    .then([{ id }] => {\n      this.userId = id\n\n      return connection.execute('SELECT is_active FROM users WHERE user_id = ?', [userId])\n    })\n    .then([{ is_active }] => {\n      if (!is_active) {\n        throw new Error('Error - user is inactive')\n      }\n\n      return connection.execute('UPDATE users SET email = ? WHERE id = ?', [newEmail. this.userId])\n    })\n    .then(() => connection.execute('SELECT * FROM users WHERE id = ?', [this.userId])\n    .then([user] => user)\n}\n\nupdateUserEmail('kyle@example.com', 'kyle2@example.com')\n  .then(changedUser => console.log(changedUser))\n  .catch(error => console.error(error))\n```\n\n## Async/Await\n\nAsync/Await is a layer of syntactic sugar on top of Promises that eliminates another layer of nesting. By marking a function as `async`, we gain access to the `await` keyword. `await` lets us \"unwrap\" Promises inline, and treat pending Promises as if they were resolved synchronously. You can _only_ `await` functions that return Promises. If you `await` a function that does not return a `Promise`, it's result will be wrapped in a `Promise.resolve` call.\n\n```js\n// With a Promise\nfunction getData() {\n  return fetch(\"example.com/api/data\")\n    .then((body) => body.json())\n    .then((data) => console.log(JSON.stringify(data)));\n}\n\n// With async/await\nasync function getData() {\n  const body = await fetch(\"example.com/api/data\");\n  const data = await body.json();\n\n  console.log(JSON.stringify(data));\n}\n```\n\nCatching errors in async/await blocks is a matter of using JavaScript's standard `try/catch` construct. Similar to Promises, this error will \"bubble up\", so you only need one `catch` block for a given block of async code.\n\n```js\nasync function getData() {\n  try {\n    const body = await fetch(\"example.com/api/data\");\n    const data = await body.json();\n\n    console.log(JSON.stringify(data));\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\nHere's our MySQL example rewritten with async/await. By leveraging libraries and interfaces that return Promises (like MySQL2), you can wind up with some really concise async code.\n\n```js\nconst config = require(\"./config.json\");\nconst mysql = require(\"mysql2/promise\");\n\nasync function updateUserEmail(oldEmail, newEmail) {\n  const connection = await mysql.createConnection(config);\n\n  const userId = (await connection.execute(\"SELECT id FROM users WHERE email = ?\", [oldEmail]))[0]\n    .id;\n\n  const isActive = await connection.execute(\"SELECT is_active FROM users WHERE user_id = ?\", [\n    userId,\n  ])[0].is_active;\n\n  await connection.execute(\"UPDATE users SET email = ? WHERE id = ?\", [newEmail.userId]);\n\n  return (await connection.execute(\"SELECT * FROM users WHERE id = ?\", [this.userId]))[0];\n}\n\n// You actually can't use `await` in the top level scope, so you'd need to put this\n// into a separate  `async` function or something in the real world\ntry {\n  const user = await updateUserEmail(\"kyle@example.com\", \"kyle2@example.com\");\n  console.log(user);\n} catch (error) {\n  console.error(error);\n}\n```\n\nAnd that's that! Now you've seen a few practical examples of asynchronous code and how JavaScript is equipped to handle these use cases. In modern JavaScript, it's helpful to have an understanding of each of these async patterns and how they relate to one another. `async/await` is definitely the most modern approach to async code, but you'll still run into plenty of callbacks, and having a good understanding of `Promises` is important to effectively utilize `async/await`.\n\n## Further Reading\n\n- https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\n",
          "html": "<p>JavaScript is regularly referred to as \"async by default\", but the way in which async code is commonly handled has changed over JavaScript's lifetime. We've moved from <strong>callbacks</strong> to <strong>promises</strong> to <strong>async/await</strong> over the years, but each of these approaches in related to its predecessors in one way or another.</p>\n<h2>Asynchronous vs Synchronous</h2>\n<p>To begin, let's quickly make clear the difference between asynchronous and synchronous code. When code is synchronous, it's executed in \"line order\", meaning each task defined by your code is executed to completion before moving onto the next task. In JavaScript, that might mean something like this.</p>\n<pre><code class=\"language-js\">console.log(\"Hello world\");\n\nconst name = \"kyle\";\nconsole.log(\"It's me, \" + name);\n\nconsole.log(\"Some lovely code :)\");\n</code></pre>\n<p>All of this code executes synchronously - each line is executed to completion before the program moves to the next line.</p>\n<p>Asynchronous programming works in the opposite way though: the program moves to the next line <em>before</em> the previous line has executed to completion. We'll dig into some example throughout this post, but common cases involving asynchronous code are database connections, HTTP requests, and other instances where your program might have to wait for a response from some other source.</p>\n<p>Here's a great <a href=\"https://stackoverflow.com/questions/748175/asynchronous-vs-synchronous-execution-what-does-it-really-mean/26804844#26804844\">StackOverflow</a> answer that does a good ELI5 for the difference:</p>\n<blockquote>\n<p>SYNCHRONOUS \nYou are in a queue to get a movie ticket. You cannot get one until everybody in front of you gets one, and the same applies to the people queued behind you.  \nASYNCHRONOUS \nYou are in a restaurant with many other people. You order your food. Other people can also order their food, they don't have to wait for your food to be cooked and served to you before they can order. In the kitchen restaurant workers are continuously cooking, serving, and taking orders. People will get their food served as soon as it is cooked. </p>\n</blockquote>\n<p>With (hopefully) a good baseline understanding of these programming concepts, let's dive into how JavaScript has handled asynchronous code throughout its lifetime as a programming language.</p>\n<h2>Callbacks</h2>\n<p>Callbacks are an essential concept in JavaScript and other asynchronous languages. Because JavaScript relies heavily on event and asynchronous processing, callbacks are core to the language. JavaScript implements <a href=\"https://eloquentjavascript.net/05_higher_order.html#h_xxCc98lOBK\">higher order functions</a>, meaning that functions can be stored in named variables and passed as arguments to other functions. A function passed as an argument to another function is typically referred to as a callback. Callbacks are the original and oldest way to handle async calls in JavaScript.</p>\n<p><code>setTimeout</code> is one of the simplest examples of a function that accepts a callback:</p>\n<pre><code class=\"language-js\">setTimeout(function () {\n  console.log(\"It has been a second!\");\n}, 1000);\n</code></pre>\n<p>Here's an example of how you might implement your own method that accepts a callback:</p>\n<pre><code class=\"language-js\">function validateInput(input, callback) {\n  var result = { errors: [] };\n\n  if (!input.name || input.name.length &#x3C; 6) {\n    result.errors.push(\"Invalid name\");\n  }\n\n  if (!input.email) {\n    result.errors.push(\"Email must be provided\");\n  }\n\n  callback(result);\n}\n\nvalidateInput({ name: \"Kyle\", email: \"kyle@example.com\" }, function (result) {\n  if (result.errors.length) {\n    console.error(\"Whoops\");\n  } else {\n    console.log(\"Hooray\");\n  }\n});\n</code></pre>\n<p>It's very easy to fall into <a href=\"http://callbackhell.com/\">\"callback hell\"</a> when you have to chain several functions together that all accept callbacks. Consider some Node code where we connect to MySQL and use standard callbacks to run some queries that depend on return values from other queries.</p>\n<pre><code class=\"language-js\">var config = require('./config.json')\nvar mysql = require('mysql')\n\n// Note: this is inefficient and bad on purpose to prove a point :)\nfunction updateUserEmail (oldEmail, newEmail, callback) {\n  var connection = mysql.createConnection(config)\n\n  connection.connect()\n\n  connection.query('SELECT id FROM users WHERE email = ?', [oldEmail], function (error, results) {\n    if (error) {\n      throw(error)\n    }\n\n    var userId = results[0].id\n\n    connection.query('SELECT is_active FROM users WHERE user_id = ?', [userId], function (error, results) {\n      if (error) {\n        throw(error)\n      }\n\n      var isActive = results[0].is_active\n\n      if (!isActive) {\n        throw new Error('Error - user is inactive')\n      }\n\n      connection.query('UPDATE users SET email = ? WHERE id = ?', [newEmail, userId], function (error, results) {\n        if (error) {\n          throw(error)\n        }\n\n        if (results[0].affectedRows === 0) {\n          throw new Error('Error - failed to update user')\n        }\n\n        connection.query('SELECT * FROM users WHERE id = ?' [userId], function (error, results) {\n          if (error) {\n            throw(error)\n          }\n\n          callback(results[0])\n        })\n      })\n    }\n  })\n\n  connection.end()\n}\n\ntry {\n  updateUserEmail('kyle@example.com', 'kyle2@example.com', function(changedUser) {\n    console.log(changedUser)\n  })\n} catch (error) {\n  console.error(error)\n}\n</code></pre>\n<h2>Promises</h2>\n<p>A <code>Promise</code> is an object that represents the eventual result of an async operation. Promises can be <code>resolved</code> or <code>rejected</code> with values, and they're similar to <code>Tasks</code> or <code>Futures</code> in other languages like C# or Java.</p>\n<p>We can instantiate a <code>Promise</code> with a constructor that takes a function like so</p>\n<pre><code class=\"language-js\">new Promise((resolve, reject) => {\n  if (foo) {\n    return resolve(\"foo\");\n  }\n\n  reject(\"not foo\");\n});\n</code></pre>\n<p>Promises transition through three states: <code>pending</code>, <code>fulfilled</code>, and <code>rejected</code>. We can chain onto Promises to perform meaningful operations with the <code>then</code> method. The <code>catch</code> method is used to catch rejections.</p>\n<pre><code class=\"language-js\">somePromise(foo)\n  .then((data) => {\n    console.log(data);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n</code></pre>\n<p>Promises can be chained, and errors will \"bubble up\" to a single <code>catch</code> handler at the end, which makes them very powerful for reducing nesting and unifying your scope.</p>\n<pre><code class=\"language-js\">somePromise(foo)\n  .then((data) => {\n    return transformData(data);\n  })\n  .then((newData) => {\n    if (newData.bar) {\n      return logData(newData);\n    }\n\n    return logSomethingElse(newData);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n</code></pre>\n<p>Promises are a powerful pattern for cleaning up callback-laden code. Here's the example with the MySQL calls from above rewritten with Promises.</p>\n<pre><code class=\"language-js\">const config = require('./config.json')\nconst mysql = require('mysql2/promise')\n\nfunction updateUserEmail (oldEmail, newEmail ) {\n  mysql.createConnection(config)\n    .then(connection => connection.execute('SELECT id FROM users WHERE email = ?', [oldEmail])\n    .then([{ id }] => {\n      this.userId = id\n\n      return connection.execute('SELECT is_active FROM users WHERE user_id = ?', [userId])\n    })\n    .then([{ is_active }] => {\n      if (!is_active) {\n        throw new Error('Error - user is inactive')\n      }\n\n      return connection.execute('UPDATE users SET email = ? WHERE id = ?', [newEmail. this.userId])\n    })\n    .then(() => connection.execute('SELECT * FROM users WHERE id = ?', [this.userId])\n    .then([user] => user)\n}\n\nupdateUserEmail('kyle@example.com', 'kyle2@example.com')\n  .then(changedUser => console.log(changedUser))\n  .catch(error => console.error(error))\n</code></pre>\n<h2>Async/Await</h2>\n<p>Async/Await is a layer of syntactic sugar on top of Promises that eliminates another layer of nesting. By marking a function as <code>async</code>, we gain access to the <code>await</code> keyword. <code>await</code> lets us \"unwrap\" Promises inline, and treat pending Promises as if they were resolved synchronously. You can <em>only</em> <code>await</code> functions that return Promises. If you <code>await</code> a function that does not return a <code>Promise</code>, it's result will be wrapped in a <code>Promise.resolve</code> call.</p>\n<pre><code class=\"language-js\">// With a Promise\nfunction getData() {\n  return fetch(\"example.com/api/data\")\n    .then((body) => body.json())\n    .then((data) => console.log(JSON.stringify(data)));\n}\n\n// With async/await\nasync function getData() {\n  const body = await fetch(\"example.com/api/data\");\n  const data = await body.json();\n\n  console.log(JSON.stringify(data));\n}\n</code></pre>\n<p>Catching errors in async/await blocks is a matter of using JavaScript's standard <code>try/catch</code> construct. Similar to Promises, this error will \"bubble up\", so you only need one <code>catch</code> block for a given block of async code.</p>\n<pre><code class=\"language-js\">async function getData() {\n  try {\n    const body = await fetch(\"example.com/api/data\");\n    const data = await body.json();\n\n    console.log(JSON.stringify(data));\n  } catch (error) {\n    console.error(error);\n  }\n}\n</code></pre>\n<p>Here's our MySQL example rewritten with async/await. By leveraging libraries and interfaces that return Promises (like MySQL2), you can wind up with some really concise async code.</p>\n<pre><code class=\"language-js\">const config = require(\"./config.json\");\nconst mysql = require(\"mysql2/promise\");\n\nasync function updateUserEmail(oldEmail, newEmail) {\n  const connection = await mysql.createConnection(config);\n\n  const userId = (await connection.execute(\"SELECT id FROM users WHERE email = ?\", [oldEmail]))[0]\n    .id;\n\n  const isActive = await connection.execute(\"SELECT is_active FROM users WHERE user_id = ?\", [\n    userId,\n  ])[0].is_active;\n\n  await connection.execute(\"UPDATE users SET email = ? WHERE id = ?\", [newEmail.userId]);\n\n  return (await connection.execute(\"SELECT * FROM users WHERE id = ?\", [this.userId]))[0];\n}\n\n// You actually can't use `await` in the top level scope, so you'd need to put this\n// into a separate  `async` function or something in the real world\ntry {\n  const user = await updateUserEmail(\"kyle@example.com\", \"kyle2@example.com\");\n  console.log(user);\n} catch (error) {\n  console.error(error);\n}\n</code></pre>\n<p>And that's that! Now you've seen a few practical examples of asynchronous code and how JavaScript is equipped to handle these use cases. In modern JavaScript, it's helpful to have an understanding of each of these async patterns and how they relate to one another. <code>async/await</code> is definitely the most modern approach to async code, but you'll still run into plenty of callbacks, and having a good understanding of <code>Promises</code> is important to effectively utilize <code>async/await</code>.</p>\n<h2>Further Reading</h2>\n<ul>\n<li>https://developer.mozilla.org/en-US/docs/Glossary/Callback_function</li>\n<li>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</li>\n<li>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function</li>\n</ul>"
        },
        "_id": "async-patterns-in-js.mdx",
        "_raw": {
          "sourceFilePath": "async-patterns-in-js.mdx",
          "sourceFileName": "async-patterns-in-js.mdx",
          "sourceFileDir": ".",
          "contentType": "mdx",
          "flattenedPath": "async-patterns-in-js"
        },
        "type": "Post",
        "url": "/blog/async-patterns-in-js"
      },
      "documentHash": "1687402051240",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "intro-to-graphql.mdx": {
      "document": {
        "title": "Intro to GraphQL",
        "subtitle": "A look at the core concepts of Facebook's API query language",
        "date": "2018-03-28T04:00:00.000Z",
        "body": {
          "raw": "\nWhen I first heard about GraphQL, I was unconvinced about its usefulness or applicability to the way I write web applications. I had a good grasp on RESTful API design and implementation, and GraphQL didn't seem like something I'd really \"need\". Having had a bit more exposure to GraphQL, though, I'm really starting to see a lot of the benefits of the technology. In this post, I'll try to outline some of the core concepts of GraphQL, and to explain the problems it seeks to solve.\n\n## What is it?\n\nHere's what the official GraphQL website has to say:\n\n> GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.\n\nLet's break this down into pieces and elaborate a little bit.\n\n### A Query Language\n\nGraphQL is a query language much like SQL that allows clients or consumers of your API to request the data they need. Much like you'd `SELECT *` from some database table, you can run GraphQL queries and specify fields you'd like returned. The syntax of GraphQL looks a lot like JSON with only the left hand side filled in.\n\n```graphql\nquery getUser {\n  user(id: 1) {\n    email\n    firstName\n    lastName\n  }\n}\n```\n\n### Self Documenting and Versionless\n\nAt the heart of any GraphQL API is a strongly typed schema representing all of your data types, relationships, and queries. This schema serves as an annoted source of documentation around all operations and fields defined by your API. GraphQL also has first class support for gracefully deprecating specific fields and queries, so you can iterate on your API without disrupting your client applications.\n\n### Powerful Developer Tools\n\nOne of the biggest reasons I've boarded the GraphQL hype train is [graphiql](https://github.com/graphql/graphiql), an in-browser IDE for GraphQL APIs. Graphiql provides an extremely compelling development experience for exploring, working with, and developing GraphQL APIs. I cannot understand how much of a pleasure this application is to work with. Seriously, graphiql alone is make recommending GraphQL for your next API seem reasonable.\n\n## Why does it exist?\n\nOne of the things I think developers often gloss over when presenting or exploring new technology is the \"why\" behind the technology. Knowing what problems a language or library exists to solve or what it seeks to improve are powerful tools in understanding the technology itself.\n\nGraphQL's primary purpose is to reduce the number of network calls required to interface with your API. If you've ever worked with an API that required you to make one request, and then to use some data from that response to make another N requests, this is a problem GraphQL seeks to solve. By allowing clients the ability to request nested data structures or even run multiple queries in a single request, network overhead can be grealy reduced. In today's landscape of mobile devices and potentially limited network connectivity, reducing network overhead is crucial for providing a globally high quality experience in your applications.\n\nNow, you might be saying \"wasn't this possible with REST before?\" and you'd be right about that. Yes - it has been possible to provide nested data structures and sparse field sets with REST using headers or query strings or unique endpoints. However, that's just the issue. Any time a new requirement arises around data structure or response format, it requires developing a new endpoint or implementing a new query string. This introduces friction and implementation cost to your API and your clients. By using a GraphQL schema, you can allow your clients to define their data requirements on their own, and avoid friction in the form of custom endpoints and parameters.\n\nGraphQL also reduces friction around API versioning and deprecation. Rather than maintaining multiple API versions, you can use GraphQL's `deprecated` directive to provide your clients with a warning and descriptive message when fields are deprecated. This is much more graceful than managing API documentation or actively supporting multiple API versions. You can also add entirely new fields and relationships without disrupting existing clients, since their queries will continue to work as expected regardless of new fields, types, or queries existing.\n\n## Core Concepts\n\nNow that we've got some background on GraphQL, it's time to dive into the core concepts that drive it.\n\n### Types\n\nGraphQL is a strongly typed language, so it includes a simple but powerful type system for creating your schema.\n\n#### Scalar Types\n\nGraphQL has several natively available primitive types:\n\n- String\n- Int\n- Float\n- Boolean\n- ID\n\nEverything here should be familiar to you if you've worked with most common programming languages, but the `ID` field is slightly unique. In GraphQL, a field of type `ID` denotes a unique identifier that is not intended to be human readable - like a UUID string.\n\n#### Object Types\n\nGraphQL object types are how you can define custom data structures within your schema. A User type might look something like this:\n\n```graphql\ntype User {\n  id: Int!\n  email: String!\n  firstName: String\n  lastName: String\n}\n```\n\nOnce we've defined this type in our schema, we can reference it anywhere as a type. Queries can return a `User`, fields can be of type `User`, and so forth.\n\nThe `!` syntax above denotes a given field as required.\n\n#### Lists\n\nA field can be defined as a `list` using square brackets `[]` around the type of the list. This is similar to the `List<string>` syntax in languages like Java or C# for example. In practice, this might look something like this:\n\n```graphql\ntype User {\n  id: Int!\n  email: String!\n  firstName: String\n  lastName: String\n  friends: [User!]!\n}\n```\n\nThe double `!` syntax here is something you'll see often in GraphQL list fields. What we're doing here is saying \"friends is a _required_ list of Users, where each element is non-null.\" So the list itself cannot be null, and each element of the list also cannot be null.\n\n#### Other types\n\nThere are some other GraphQL types like interfaces, unions, and enums that exist, but they're a little more advanced and not entirely necessary to get up and running with a basic GraphQL schema. You can set up inheritance structures and more advanced validation schemes with these structures, but they're outside of the scope of this basic introduction.\n\n### Queries\n\nQueries are named methods for fetching data. Your schema defines a set of queries, then any client or consumer of your API will be able to run those queries. Queries look a lot like functions in a typical programming language. They have arguments and a return type. Here's a sample query for fetching our `User` type by ID.\n\n```graphql\nquery getUserById(id: Int!) : User!\n```\n\nThen, as a client, I can call this query like so:\n\n```graphql\n{\n  getUserById(id: 1234) {\n    email\n  }\n}\n```\n\nWhen running the query, I can select only the fields I need to fulfill my needs. This is where GraphQL reduces network overhead and provides flexibility to its consumers.\n\n### Mutations\n\nMutations function almost indentically to queries, except that they result in data changes. While queries are used for the (R)ead part of CRUD, mutations power the (C)reate, (U)pdate, and (D)elete operations. To define a \"create\" action for our User type, we could define and run a mutation like so:\n\n```graphql\n# Definition\nmutation createUser(email: String!, password: String!): User!\n\n# Running the mutation\n{\n  mutation createUser(email: \"test@test.com\", password: \"password123\") {\n   id\n  }\n}\n```\n\n### Resolvers\n\nResolvers are function that tell your GraphQL server how to fulfill requests. They are the implementation of the logic behind queries and mutations. The great thing about resolvers is that they are totally agnostic of your programming language and data source. As long as your resolver returns a data structure that maps properly to your GraphQL schema, you're all set. There are all sorts of server-side GraphQL implementations for Python, Ruby, Node, C#, or whatever language you prefer.\n\nMy typical server-side language of choice is Node, so here's what a Node resolver might look like:\n\n```js\nconst UserResolver = {\n  Query: {\n    getPlayer(parent, arguments, context) {\n      const { id } = arguments;\n\n      return context.models.User.findOne({ where: { id } });\n    },\n  },\n};\n```\n\nThis resolver structure is one defined by a common server-side GraphQL environment [Apollo Server](https://www.apollographql.com/docs/graphql-tools/resolvers.html), but you can see how we might build out this structure to define function calls and business logic for each query defined in our schema.\n\n## Getting Started\n\nIf this introduction to GraphQL has you excited and ready to try things out, definitely head over to [Apollo Launchpad](https://launchpad.graphql.com/new) and get started with an interactive GraphQL sandbox environment. The official [GraphQL](https://graphql.org/) website has a fantastic, detailed [introduction](https://graphql.org/learn/) document as well that goes much more in depth that what we covered here. [Apollo's website](https://www.apollographql.com/) in general also has some great tooling around GraphQL and blog content, too.\n\nThe best way to get into GraphQL and to understand is definitely to build something, so go get your hands dirty with a Twitter clone or a to-do app or something with craft beer like every other developer!\n",
          "html": "<p>When I first heard about GraphQL, I was unconvinced about its usefulness or applicability to the way I write web applications. I had a good grasp on RESTful API design and implementation, and GraphQL didn't seem like something I'd really \"need\". Having had a bit more exposure to GraphQL, though, I'm really starting to see a lot of the benefits of the technology. In this post, I'll try to outline some of the core concepts of GraphQL, and to explain the problems it seeks to solve.</p>\n<h2>What is it?</h2>\n<p>Here's what the official GraphQL website has to say:</p>\n<blockquote>\n<p>GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.</p>\n</blockquote>\n<p>Let's break this down into pieces and elaborate a little bit.</p>\n<h3>A Query Language</h3>\n<p>GraphQL is a query language much like SQL that allows clients or consumers of your API to request the data they need. Much like you'd <code>SELECT *</code> from some database table, you can run GraphQL queries and specify fields you'd like returned. The syntax of GraphQL looks a lot like JSON with only the left hand side filled in.</p>\n<pre><code class=\"language-graphql\">query getUser {\n  user(id: 1) {\n    email\n    firstName\n    lastName\n  }\n}\n</code></pre>\n<h3>Self Documenting and Versionless</h3>\n<p>At the heart of any GraphQL API is a strongly typed schema representing all of your data types, relationships, and queries. This schema serves as an annoted source of documentation around all operations and fields defined by your API. GraphQL also has first class support for gracefully deprecating specific fields and queries, so you can iterate on your API without disrupting your client applications.</p>\n<h3>Powerful Developer Tools</h3>\n<p>One of the biggest reasons I've boarded the GraphQL hype train is <a href=\"https://github.com/graphql/graphiql\">graphiql</a>, an in-browser IDE for GraphQL APIs. Graphiql provides an extremely compelling development experience for exploring, working with, and developing GraphQL APIs. I cannot understand how much of a pleasure this application is to work with. Seriously, graphiql alone is make recommending GraphQL for your next API seem reasonable.</p>\n<h2>Why does it exist?</h2>\n<p>One of the things I think developers often gloss over when presenting or exploring new technology is the \"why\" behind the technology. Knowing what problems a language or library exists to solve or what it seeks to improve are powerful tools in understanding the technology itself.</p>\n<p>GraphQL's primary purpose is to reduce the number of network calls required to interface with your API. If you've ever worked with an API that required you to make one request, and then to use some data from that response to make another N requests, this is a problem GraphQL seeks to solve. By allowing clients the ability to request nested data structures or even run multiple queries in a single request, network overhead can be grealy reduced. In today's landscape of mobile devices and potentially limited network connectivity, reducing network overhead is crucial for providing a globally high quality experience in your applications.</p>\n<p>Now, you might be saying \"wasn't this possible with REST before?\" and you'd be right about that. Yes - it has been possible to provide nested data structures and sparse field sets with REST using headers or query strings or unique endpoints. However, that's just the issue. Any time a new requirement arises around data structure or response format, it requires developing a new endpoint or implementing a new query string. This introduces friction and implementation cost to your API and your clients. By using a GraphQL schema, you can allow your clients to define their data requirements on their own, and avoid friction in the form of custom endpoints and parameters.</p>\n<p>GraphQL also reduces friction around API versioning and deprecation. Rather than maintaining multiple API versions, you can use GraphQL's <code>deprecated</code> directive to provide your clients with a warning and descriptive message when fields are deprecated. This is much more graceful than managing API documentation or actively supporting multiple API versions. You can also add entirely new fields and relationships without disrupting existing clients, since their queries will continue to work as expected regardless of new fields, types, or queries existing.</p>\n<h2>Core Concepts</h2>\n<p>Now that we've got some background on GraphQL, it's time to dive into the core concepts that drive it.</p>\n<h3>Types</h3>\n<p>GraphQL is a strongly typed language, so it includes a simple but powerful type system for creating your schema.</p>\n<h4>Scalar Types</h4>\n<p>GraphQL has several natively available primitive types:</p>\n<ul>\n<li>String</li>\n<li>Int</li>\n<li>Float</li>\n<li>Boolean</li>\n<li>ID</li>\n</ul>\n<p>Everything here should be familiar to you if you've worked with most common programming languages, but the <code>ID</code> field is slightly unique. In GraphQL, a field of type <code>ID</code> denotes a unique identifier that is not intended to be human readable - like a UUID string.</p>\n<h4>Object Types</h4>\n<p>GraphQL object types are how you can define custom data structures within your schema. A User type might look something like this:</p>\n<pre><code class=\"language-graphql\">type User {\n  id: Int!\n  email: String!\n  firstName: String\n  lastName: String\n}\n</code></pre>\n<p>Once we've defined this type in our schema, we can reference it anywhere as a type. Queries can return a <code>User</code>, fields can be of type <code>User</code>, and so forth.</p>\n<p>The <code>!</code> syntax above denotes a given field as required.</p>\n<h4>Lists</h4>\n<p>A field can be defined as a <code>list</code> using square brackets <code>[]</code> around the type of the list. This is similar to the <code>List&#x3C;string></code> syntax in languages like Java or C# for example. In practice, this might look something like this:</p>\n<pre><code class=\"language-graphql\">type User {\n  id: Int!\n  email: String!\n  firstName: String\n  lastName: String\n  friends: [User!]!\n}\n</code></pre>\n<p>The double <code>!</code> syntax here is something you'll see often in GraphQL list fields. What we're doing here is saying \"friends is a <em>required</em> list of Users, where each element is non-null.\" So the list itself cannot be null, and each element of the list also cannot be null.</p>\n<h4>Other types</h4>\n<p>There are some other GraphQL types like interfaces, unions, and enums that exist, but they're a little more advanced and not entirely necessary to get up and running with a basic GraphQL schema. You can set up inheritance structures and more advanced validation schemes with these structures, but they're outside of the scope of this basic introduction.</p>\n<h3>Queries</h3>\n<p>Queries are named methods for fetching data. Your schema defines a set of queries, then any client or consumer of your API will be able to run those queries. Queries look a lot like functions in a typical programming language. They have arguments and a return type. Here's a sample query for fetching our <code>User</code> type by ID.</p>\n<pre><code class=\"language-graphql\">query getUserById(id: Int!) : User!\n</code></pre>\n<p>Then, as a client, I can call this query like so:</p>\n<pre><code class=\"language-graphql\">{\n  getUserById(id: 1234) {\n    email\n  }\n}\n</code></pre>\n<p>When running the query, I can select only the fields I need to fulfill my needs. This is where GraphQL reduces network overhead and provides flexibility to its consumers.</p>\n<h3>Mutations</h3>\n<p>Mutations function almost indentically to queries, except that they result in data changes. While queries are used for the (R)ead part of CRUD, mutations power the (C)reate, (U)pdate, and (D)elete operations. To define a \"create\" action for our User type, we could define and run a mutation like so:</p>\n<pre><code class=\"language-graphql\"># Definition\nmutation createUser(email: String!, password: String!): User!\n\n# Running the mutation\n{\n  mutation createUser(email: \"test@test.com\", password: \"password123\") {\n   id\n  }\n}\n</code></pre>\n<h3>Resolvers</h3>\n<p>Resolvers are function that tell your GraphQL server how to fulfill requests. They are the implementation of the logic behind queries and mutations. The great thing about resolvers is that they are totally agnostic of your programming language and data source. As long as your resolver returns a data structure that maps properly to your GraphQL schema, you're all set. There are all sorts of server-side GraphQL implementations for Python, Ruby, Node, C#, or whatever language you prefer.</p>\n<p>My typical server-side language of choice is Node, so here's what a Node resolver might look like:</p>\n<pre><code class=\"language-js\">const UserResolver = {\n  Query: {\n    getPlayer(parent, arguments, context) {\n      const { id } = arguments;\n\n      return context.models.User.findOne({ where: { id } });\n    },\n  },\n};\n</code></pre>\n<p>This resolver structure is one defined by a common server-side GraphQL environment <a href=\"https://www.apollographql.com/docs/graphql-tools/resolvers.html\">Apollo Server</a>, but you can see how we might build out this structure to define function calls and business logic for each query defined in our schema.</p>\n<h2>Getting Started</h2>\n<p>If this introduction to GraphQL has you excited and ready to try things out, definitely head over to <a href=\"https://launchpad.graphql.com/new\">Apollo Launchpad</a> and get started with an interactive GraphQL sandbox environment. The official <a href=\"https://graphql.org/\">GraphQL</a> website has a fantastic, detailed <a href=\"https://graphql.org/learn/\">introduction</a> document as well that goes much more in depth that what we covered here. <a href=\"https://www.apollographql.com/\">Apollo's website</a> in general also has some great tooling around GraphQL and blog content, too.</p>\n<p>The best way to get into GraphQL and to understand is definitely to build something, so go get your hands dirty with a Twitter clone or a to-do app or something with craft beer like every other developer!</p>"
        },
        "_id": "intro-to-graphql.mdx",
        "_raw": {
          "sourceFilePath": "intro-to-graphql.mdx",
          "sourceFileName": "intro-to-graphql.mdx",
          "sourceFileDir": ".",
          "contentType": "mdx",
          "flattenedPath": "intro-to-graphql"
        },
        "type": "Post",
        "url": "/blog/intro-to-graphql"
      },
      "documentHash": "1687402058549",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "product-teams-vs-agency-jobs.mdx": {
      "document": {
        "title": "Software Engineering Jobs: Product Teams vs Agencies",
        "subtitle": "Comparing two common engineering job archetypes",
        "date": "2018-12-20T05:00:00.000Z",
        "body": {
          "raw": "\nIn the software engineering industry, it's common to divide jobs into two broad classifications: product and agency. A product job involves working for a company who sells or actively develops some software product that's consumed by end users. The company owns the product, and the product in some way contributes to the company's bottom line. An agency job, conversely, involves working on a contractual basis for a multitude of clients. A development agency might specialize in a few smaller markets, but typically the work load is more broad and is spread across a number of clients.\n\nEach of these classifications comes with its own set of benefits and detriments, of course, and you'll find developers that prefer one over the other. It can be hard to know exactly what each kind of job entails without a large amount of experience on both sides of the divide, but let's break down some key pros and cons for product and agency jobs.\n\n## Product Companies\n\n### Pros\n\n#### Identity and Ownership\n\nBecause product teams focus on delivering core business functionality and impacting the company's bottom line, they typically encourage a strong sense of team identity and product ownership. It's easier to feel connected to the software you're building when there's a clear sense of how it impacts the company for which you work. Product teams are also typically more visible and in closer communication with core business stakeholders. Being closer to the \"product owners\" allows engineers a clearer vision of how their solutions further the mission of the company.\n\n#### Stability\n\nProduct teams offer an environment with less variation than most agency jobs. Because there's one core product or business identity, there's less variation in the categorization of the solutions and products the engineers build. For example, a SaaS company that sells marketing and advertising software is typically going to create software solutions related to marketing and advertising software. There's less room for context shifts with product teams, and engineers are able to retain and transfer industry knowledge between teams and products.\n\n### Cons\n\n#### Stagnation\n\nAlthough some product companies encourage moving around between teams or projects, it's not always feasible for every engineer. A lot of engineers will work on a single project year after year for most of their tenure at a product company. To some degree, this affords the engineers stability as mentioned above. However, it's easy to fall into a rut and to feel stifled without a dynamic environment.\n\n#### Legacy Code\n\nAlong with personal stagnation, product companies own their codebases for as long as they exist. This means, as an engineer, you'll likely be maintaining code that was written previously by current or former engineers from the company. \"Legacy Code\" can sometimes be misrepresented as a four letter word in the software engineering world - it's not always bad. There are plenty of well maintained, well documented \"legacy\" code bases serving enormous user bases across the world. That being said, there are just many spaghetti codebases without tests. Your mileage may vary here, but know that at a product company you will likely be inheriting at least some code.\n\n#### A Static Stack\n\nSince product companies have full ownership of their technology, the stack and solution architecture tend to be somewhat set in stone. A good product company will always strive to find the right tool for the job, but there will likely be less room for tinkering and working with bleeding edge technology. Whether this is truly a con might be subjective. Some developers lament \"fatigue\" and early adoption of new technology, but others relish in the opportunity to work on the cutting edge.\n\n## Agencies\n\n### Pros\n\n#### Fast paced, dynamic environment\n\nAgencies tend to work a lot faster than average product companies. When companies contract out work, they're typically looking for shorter implementation timelines in order to minimize their risk. Because of this, projects tends to move a lot faster. If you're someone who can be annoyed by overbearing working processes, meetings, and red tape, this might be a selling point for agency work.\n\n#### Freedom of exploration and experimentation\n\nWhere product companies typically hold at least some loyalty to a specific toolchain or technology stack, agencies can be more willing to experiment and explore multiple technology options. Unless the agency is highly specialized (e.g a WordPress shop or a Rails consultancy), the technology choices will typically be more tailored to individual clients and projects, and so you might be exposed to a wider variety of technologies.\n\n### Cons\n\n#### Difficulties with ownership\n\nSince agencies work on a contractual basis, projects have a set end date. When projects are over, development stops. Some agencies will take on longer term maintenance work after a project's delivery, but this maintenance work is frequently contracted to another, often offshore, company instead. It can be hard to find a sense of ownership and pride in a project that will be handed off in the relatively near future.\n\n#### Shorter timelines, tighter budgets\n\nAnother issue with contractual work is a more fixed budget - in terms of time _and_ money. When projects have a concrete delivery date, it can lead to crunch time and overwork. A good agency with an effective working process won't run into these issues, but the environment around fixed budget and fixed timeline projects can be more conducive to \"death marches\" as deadlines draw near. Look out for unpaid overtime, lofty promises, and unreachable deadlines.\n\n---\n\nThere are developers that prefer product companies and there are developers that prefer agency work. I'd recommend working a job from each paradigm if possible throughout your career, as each environment has a lot to offer in terms of skillsets and experience.\n\nThis is not an exhaustive or definitive list! I know there are product companies with tons of room for internal research and development, and I know there are agencies with iron clad working processes and solid contract hand offs. These are just a few things I've noticed in my few years of experience, and some things I've heard from other developers.\n",
          "html": "<p>In the software engineering industry, it's common to divide jobs into two broad classifications: product and agency. A product job involves working for a company who sells or actively develops some software product that's consumed by end users. The company owns the product, and the product in some way contributes to the company's bottom line. An agency job, conversely, involves working on a contractual basis for a multitude of clients. A development agency might specialize in a few smaller markets, but typically the work load is more broad and is spread across a number of clients.</p>\n<p>Each of these classifications comes with its own set of benefits and detriments, of course, and you'll find developers that prefer one over the other. It can be hard to know exactly what each kind of job entails without a large amount of experience on both sides of the divide, but let's break down some key pros and cons for product and agency jobs.</p>\n<h2>Product Companies</h2>\n<h3>Pros</h3>\n<h4>Identity and Ownership</h4>\n<p>Because product teams focus on delivering core business functionality and impacting the company's bottom line, they typically encourage a strong sense of team identity and product ownership. It's easier to feel connected to the software you're building when there's a clear sense of how it impacts the company for which you work. Product teams are also typically more visible and in closer communication with core business stakeholders. Being closer to the \"product owners\" allows engineers a clearer vision of how their solutions further the mission of the company.</p>\n<h4>Stability</h4>\n<p>Product teams offer an environment with less variation than most agency jobs. Because there's one core product or business identity, there's less variation in the categorization of the solutions and products the engineers build. For example, a SaaS company that sells marketing and advertising software is typically going to create software solutions related to marketing and advertising software. There's less room for context shifts with product teams, and engineers are able to retain and transfer industry knowledge between teams and products.</p>\n<h3>Cons</h3>\n<h4>Stagnation</h4>\n<p>Although some product companies encourage moving around between teams or projects, it's not always feasible for every engineer. A lot of engineers will work on a single project year after year for most of their tenure at a product company. To some degree, this affords the engineers stability as mentioned above. However, it's easy to fall into a rut and to feel stifled without a dynamic environment.</p>\n<h4>Legacy Code</h4>\n<p>Along with personal stagnation, product companies own their codebases for as long as they exist. This means, as an engineer, you'll likely be maintaining code that was written previously by current or former engineers from the company. \"Legacy Code\" can sometimes be misrepresented as a four letter word in the software engineering world - it's not always bad. There are plenty of well maintained, well documented \"legacy\" code bases serving enormous user bases across the world. That being said, there are just many spaghetti codebases without tests. Your mileage may vary here, but know that at a product company you will likely be inheriting at least some code.</p>\n<h4>A Static Stack</h4>\n<p>Since product companies have full ownership of their technology, the stack and solution architecture tend to be somewhat set in stone. A good product company will always strive to find the right tool for the job, but there will likely be less room for tinkering and working with bleeding edge technology. Whether this is truly a con might be subjective. Some developers lament \"fatigue\" and early adoption of new technology, but others relish in the opportunity to work on the cutting edge.</p>\n<h2>Agencies</h2>\n<h3>Pros</h3>\n<h4>Fast paced, dynamic environment</h4>\n<p>Agencies tend to work a lot faster than average product companies. When companies contract out work, they're typically looking for shorter implementation timelines in order to minimize their risk. Because of this, projects tends to move a lot faster. If you're someone who can be annoyed by overbearing working processes, meetings, and red tape, this might be a selling point for agency work.</p>\n<h4>Freedom of exploration and experimentation</h4>\n<p>Where product companies typically hold at least some loyalty to a specific toolchain or technology stack, agencies can be more willing to experiment and explore multiple technology options. Unless the agency is highly specialized (e.g a WordPress shop or a Rails consultancy), the technology choices will typically be more tailored to individual clients and projects, and so you might be exposed to a wider variety of technologies.</p>\n<h3>Cons</h3>\n<h4>Difficulties with ownership</h4>\n<p>Since agencies work on a contractual basis, projects have a set end date. When projects are over, development stops. Some agencies will take on longer term maintenance work after a project's delivery, but this maintenance work is frequently contracted to another, often offshore, company instead. It can be hard to find a sense of ownership and pride in a project that will be handed off in the relatively near future.</p>\n<h4>Shorter timelines, tighter budgets</h4>\n<p>Another issue with contractual work is a more fixed budget - in terms of time <em>and</em> money. When projects have a concrete delivery date, it can lead to crunch time and overwork. A good agency with an effective working process won't run into these issues, but the environment around fixed budget and fixed timeline projects can be more conducive to \"death marches\" as deadlines draw near. Look out for unpaid overtime, lofty promises, and unreachable deadlines.</p>\n<hr>\n<p>There are developers that prefer product companies and there are developers that prefer agency work. I'd recommend working a job from each paradigm if possible throughout your career, as each environment has a lot to offer in terms of skillsets and experience.</p>\n<p>This is not an exhaustive or definitive list! I know there are product companies with tons of room for internal research and development, and I know there are agencies with iron clad working processes and solid contract hand offs. These are just a few things I've noticed in my few years of experience, and some things I've heard from other developers.</p>"
        },
        "_id": "product-teams-vs-agency-jobs.mdx",
        "_raw": {
          "sourceFilePath": "product-teams-vs-agency-jobs.mdx",
          "sourceFileName": "product-teams-vs-agency-jobs.mdx",
          "sourceFileDir": ".",
          "contentType": "mdx",
          "flattenedPath": "product-teams-vs-agency-jobs"
        },
        "type": "Post",
        "url": "/blog/product-teams-vs-agency-jobs"
      },
      "documentHash": "1687402066378",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "quick-tip-guard-clauses.mdx": {
      "document": {
        "title": "Quick Tip: Guard Clauses",
        "subtitle": "Reducing nesting and improving readability",
        "date": "2019-12-06T05:00:00.000Z",
        "body": {
          "raw": "\nThere are a few things that I find come up more often than others in code review. Whether I'm the one doing the review, or I'm receiving code review from a peer, there are some things that are just more obvious to someone with an outside perspective. One of these things, I've found, is the concept of [guard clauses](https://wiki.c2.com/?GuardClause) or early returns.\n\nLet's take a look at a block of JavaScript code as an example:\n\n```js\nfunction validateUser(user) {\n  if (user.email) {\n    const hasValidEmail = validateEmail(user.email);\n\n    if (user.password) {\n      const hasValidPassword = validatePassword(user.password);\n\n      return hasValidEmail && hasValidPassword;\n    }\n  }\n\n  return false;\n}\n```\n\nUsing `if` statements, we've set up some logic that translate to something like this:\n\n> If a user has an email, then validate the email. If a user has a password, then validate the password. If the email and password are valid, the user is valid. Otherwise, the user is invalid.\n\nIt's a bit hard to translate this sort of structure into pseudocode or plain English as we've written it, but what if we flipped the script a bit. What if we start with the conditions that denote an invalid user instead?\n\n> If a user doesn't have an email, they are invalid. If a user doesn't has a password, they are invalid. If a user has a valid email and password, they are valid.\n\nLet's see if we can translate this into code:\n\n```js\nfunction validateUser(user) {\n  if (!user.email || !user.password) {\n    return false;\n  }\n\n  const hasValidEmail = validateEmail(user.email);\n  const hasValidPassword = validatePassword(user.password);\n\n  return hasValidEmail && hasValidPassword;\n}\n```\n\nNow we've got a much more concise, more coherent method that's logically equivalent (proven by some [tests](https://codesandbox.io/s/guard-clause-tests-f0ehr)) to our previous one. This concept of \"inverting\" your conditions and pulling them up to the top of the method is called a \"Guard Clause\". Rather than nesting logic underneath positive/assertive conditions repeatedly, we can determine the negative conditions up front and bail out of a method right away.\n\nWhen you're deep in the implementation of some logic, it can be hard to see opportunities to invert conditions like this. During code review, though, a fresh pair of eyes is great for identifying areas where this particular refactor can be made.\n\nFurther Reading:\n\n- https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html\n- https://medium.com/@scadge/if-statements-design-guard-clauses-might-be-all-you-need-67219a1a981a\n",
          "html": "<p>There are a few things that I find come up more often than others in code review. Whether I'm the one doing the review, or I'm receiving code review from a peer, there are some things that are just more obvious to someone with an outside perspective. One of these things, I've found, is the concept of <a href=\"https://wiki.c2.com/?GuardClause\">guard clauses</a> or early returns.</p>\n<p>Let's take a look at a block of JavaScript code as an example:</p>\n<pre><code class=\"language-js\">function validateUser(user) {\n  if (user.email) {\n    const hasValidEmail = validateEmail(user.email);\n\n    if (user.password) {\n      const hasValidPassword = validatePassword(user.password);\n\n      return hasValidEmail &#x26;&#x26; hasValidPassword;\n    }\n  }\n\n  return false;\n}\n</code></pre>\n<p>Using <code>if</code> statements, we've set up some logic that translate to something like this:</p>\n<blockquote>\n<p>If a user has an email, then validate the email. If a user has a password, then validate the password. If the email and password are valid, the user is valid. Otherwise, the user is invalid.</p>\n</blockquote>\n<p>It's a bit hard to translate this sort of structure into pseudocode or plain English as we've written it, but what if we flipped the script a bit. What if we start with the conditions that denote an invalid user instead?</p>\n<blockquote>\n<p>If a user doesn't have an email, they are invalid. If a user doesn't has a password, they are invalid. If a user has a valid email and password, they are valid.</p>\n</blockquote>\n<p>Let's see if we can translate this into code:</p>\n<pre><code class=\"language-js\">function validateUser(user) {\n  if (!user.email || !user.password) {\n    return false;\n  }\n\n  const hasValidEmail = validateEmail(user.email);\n  const hasValidPassword = validatePassword(user.password);\n\n  return hasValidEmail &#x26;&#x26; hasValidPassword;\n}\n</code></pre>\n<p>Now we've got a much more concise, more coherent method that's logically equivalent (proven by some <a href=\"https://codesandbox.io/s/guard-clause-tests-f0ehr\">tests</a>) to our previous one. This concept of \"inverting\" your conditions and pulling them up to the top of the method is called a \"Guard Clause\". Rather than nesting logic underneath positive/assertive conditions repeatedly, we can determine the negative conditions up front and bail out of a method right away.</p>\n<p>When you're deep in the implementation of some logic, it can be hard to see opportunities to invert conditions like this. During code review, though, a fresh pair of eyes is great for identifying areas where this particular refactor can be made.</p>\n<p>Further Reading:</p>\n<ul>\n<li>https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html</li>\n<li>https://medium.com/@scadge/if-statements-design-guard-clauses-might-be-all-you-need-67219a1a981a</li>\n</ul>"
        },
        "_id": "quick-tip-guard-clauses.mdx",
        "_raw": {
          "sourceFilePath": "quick-tip-guard-clauses.mdx",
          "sourceFileName": "quick-tip-guard-clauses.mdx",
          "sourceFileDir": ".",
          "contentType": "mdx",
          "flattenedPath": "quick-tip-guard-clauses"
        },
        "type": "Post",
        "url": "/blog/quick-tip-guard-clauses"
      },
      "documentHash": "1687402072213",
      "hasWarnings": false,
      "documentTypeName": "Post"
    }
  }
}
