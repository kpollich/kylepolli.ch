{
  "title": "Async patterns in JavaScript",
  "subtitle": "A brief history of asynchronous programming in JavaScript",
  "date": "2018-03-25T04:00:00.000Z",
  "body": {
    "raw": "\nJavaScript is regularly referred to as \"async by default\", but the way in which async code is commonly handled has changed over JavaScript's lifetime. We've moved from **callbacks** to **promises** to **async/await** over the years, but each of these approaches in related to its predecessors in one way or another.\n\n## Asynchronous vs Synchronous\n\nTo begin, let's quickly make clear the difference between asynchronous and synchronous code. When code is synchronous, it's executed in \"line order\", meaning each task defined by your code is executed to completion before moving onto the next task. In JavaScript, that might mean something like this.\n\n```js\nconsole.log(\"Hello world\");\n\nconst name = \"kyle\";\nconsole.log(\"It's me, \" + name);\n\nconsole.log(\"Some lovely code :)\");\n```\n\nAll of this code executes synchronously - each line is executed to completion before the program moves to the next line.\n\nAsynchronous programming works in the opposite way though: the program moves to the next line _before_ the previous line has executed to completion. We'll dig into some example throughout this post, but common cases involving asynchronous code are database connections, HTTP requests, and other instances where your program might have to wait for a response from some other source.\n\nHere's a great [StackOverflow](https://stackoverflow.com/questions/748175/asynchronous-vs-synchronous-execution-what-does-it-really-mean/26804844#26804844) answer that does a good ELI5 for the difference:\n\n> SYNCHRONOUS <br/>\n> You are in a queue to get a movie ticket. You cannot get one until everybody in front of you gets one, and the same applies to the people queued behind you. <br /> <br />\n> ASYNCHRONOUS <br />\n> You are in a restaurant with many other people. You order your food. Other people can also order their food, they don't have to wait for your food to be cooked and served to you before they can order. In the kitchen restaurant workers are continuously cooking, serving, and taking orders. People will get their food served as soon as it is cooked. <br />\n\nWith (hopefully) a good baseline understanding of these programming concepts, let's dive into how JavaScript has handled asynchronous code throughout its lifetime as a programming language.\n\n## Callbacks\n\nCallbacks are an essential concept in JavaScript and other asynchronous languages. Because JavaScript relies heavily on event and asynchronous processing, callbacks are core to the language. JavaScript implements [higher order functions](https://eloquentjavascript.net/05_higher_order.html#h_xxCc98lOBK), meaning that functions can be stored in named variables and passed as arguments to other functions. A function passed as an argument to another function is typically referred to as a callback. Callbacks are the original and oldest way to handle async calls in JavaScript.\n\n`setTimeout` is one of the simplest examples of a function that accepts a callback:\n\n```js\nsetTimeout(function () {\n  console.log(\"It has been a second!\");\n}, 1000);\n```\n\nHere's an example of how you might implement your own method that accepts a callback:\n\n```js\nfunction validateInput(input, callback) {\n  var result = { errors: [] };\n\n  if (!input.name || input.name.length < 6) {\n    result.errors.push(\"Invalid name\");\n  }\n\n  if (!input.email) {\n    result.errors.push(\"Email must be provided\");\n  }\n\n  callback(result);\n}\n\nvalidateInput({ name: \"Kyle\", email: \"kyle@example.com\" }, function (result) {\n  if (result.errors.length) {\n    console.error(\"Whoops\");\n  } else {\n    console.log(\"Hooray\");\n  }\n});\n```\n\nIt's very easy to fall into [\"callback hell\"](http://callbackhell.com/) when you have to chain several functions together that all accept callbacks. Consider some Node code where we connect to MySQL and use standard callbacks to run some queries that depend on return values from other queries.\n\n```js\nvar config = require('./config.json')\nvar mysql = require('mysql')\n\n// Note: this is inefficient and bad on purpose to prove a point :)\nfunction updateUserEmail (oldEmail, newEmail, callback) {\n  var connection = mysql.createConnection(config)\n\n  connection.connect()\n\n  connection.query('SELECT id FROM users WHERE email = ?', [oldEmail], function (error, results) {\n    if (error) {\n      throw(error)\n    }\n\n    var userId = results[0].id\n\n    connection.query('SELECT is_active FROM users WHERE user_id = ?', [userId], function (error, results) {\n      if (error) {\n        throw(error)\n      }\n\n      var isActive = results[0].is_active\n\n      if (!isActive) {\n        throw new Error('Error - user is inactive')\n      }\n\n      connection.query('UPDATE users SET email = ? WHERE id = ?', [newEmail, userId], function (error, results) {\n        if (error) {\n          throw(error)\n        }\n\n        if (results[0].affectedRows === 0) {\n          throw new Error('Error - failed to update user')\n        }\n\n        connection.query('SELECT * FROM users WHERE id = ?' [userId], function (error, results) {\n          if (error) {\n            throw(error)\n          }\n\n          callback(results[0])\n        })\n      })\n    }\n  })\n\n  connection.end()\n}\n\ntry {\n  updateUserEmail('kyle@example.com', 'kyle2@example.com', function(changedUser) {\n    console.log(changedUser)\n  })\n} catch (error) {\n  console.error(error)\n}\n```\n\n## Promises\n\nA `Promise` is an object that represents the eventual result of an async operation. Promises can be `resolved` or `rejected` with values, and they're similar to `Tasks` or `Futures` in other languages like C# or Java.\n\nWe can instantiate a `Promise` with a constructor that takes a function like so\n\n```js\nnew Promise((resolve, reject) => {\n  if (foo) {\n    return resolve(\"foo\");\n  }\n\n  reject(\"not foo\");\n});\n```\n\nPromises transition through three states: `pending`, `fulfilled`, and `rejected`. We can chain onto Promises to perform meaningful operations with the `then` method. The `catch` method is used to catch rejections.\n\n```js\nsomePromise(foo)\n  .then((data) => {\n    console.log(data);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n```\n\nPromises can be chained, and errors will \"bubble up\" to a single `catch` handler at the end, which makes them very powerful for reducing nesting and unifying your scope.\n\n```js\nsomePromise(foo)\n  .then((data) => {\n    return transformData(data);\n  })\n  .then((newData) => {\n    if (newData.bar) {\n      return logData(newData);\n    }\n\n    return logSomethingElse(newData);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n```\n\nPromises are a powerful pattern for cleaning up callback-laden code. Here's the example with the MySQL calls from above rewritten with Promises.\n\n```js\nconst config = require('./config.json')\nconst mysql = require('mysql2/promise')\n\nfunction updateUserEmail (oldEmail, newEmail ) {\n  mysql.createConnection(config)\n    .then(connection => connection.execute('SELECT id FROM users WHERE email = ?', [oldEmail])\n    .then([{ id }] => {\n      this.userId = id\n\n      return connection.execute('SELECT is_active FROM users WHERE user_id = ?', [userId])\n    })\n    .then([{ is_active }] => {\n      if (!is_active) {\n        throw new Error('Error - user is inactive')\n      }\n\n      return connection.execute('UPDATE users SET email = ? WHERE id = ?', [newEmail. this.userId])\n    })\n    .then(() => connection.execute('SELECT * FROM users WHERE id = ?', [this.userId])\n    .then([user] => user)\n}\n\nupdateUserEmail('kyle@example.com', 'kyle2@example.com')\n  .then(changedUser => console.log(changedUser))\n  .catch(error => console.error(error))\n```\n\n## Async/Await\n\nAsync/Await is a layer of syntactic sugar on top of Promises that eliminates another layer of nesting. By marking a function as `async`, we gain access to the `await` keyword. `await` lets us \"unwrap\" Promises inline, and treat pending Promises as if they were resolved synchronously. You can _only_ `await` functions that return Promises. If you `await` a function that does not return a `Promise`, it's result will be wrapped in a `Promise.resolve` call.\n\n```js\n// With a Promise\nfunction getData() {\n  return fetch(\"example.com/api/data\")\n    .then((body) => body.json())\n    .then((data) => console.log(JSON.stringify(data)));\n}\n\n// With async/await\nasync function getData() {\n  const body = await fetch(\"example.com/api/data\");\n  const data = await body.json();\n\n  console.log(JSON.stringify(data));\n}\n```\n\nCatching errors in async/await blocks is a matter of using JavaScript's standard `try/catch` construct. Similar to Promises, this error will \"bubble up\", so you only need one `catch` block for a given block of async code.\n\n```js\nasync function getData() {\n  try {\n    const body = await fetch(\"example.com/api/data\");\n    const data = await body.json();\n\n    console.log(JSON.stringify(data));\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\nHere's our MySQL example rewritten with async/await. By leveraging libraries and interfaces that return Promises (like MySQL2), you can wind up with some really concise async code.\n\n```js\nconst config = require(\"./config.json\");\nconst mysql = require(\"mysql2/promise\");\n\nasync function updateUserEmail(oldEmail, newEmail) {\n  const connection = await mysql.createConnection(config);\n\n  const userId = (await connection.execute(\"SELECT id FROM users WHERE email = ?\", [oldEmail]))[0]\n    .id;\n\n  const isActive = await connection.execute(\"SELECT is_active FROM users WHERE user_id = ?\", [\n    userId,\n  ])[0].is_active;\n\n  await connection.execute(\"UPDATE users SET email = ? WHERE id = ?\", [newEmail.userId]);\n\n  return (await connection.execute(\"SELECT * FROM users WHERE id = ?\", [this.userId]))[0];\n}\n\n// You actually can't use `await` in the top level scope, so you'd need to put this\n// into a separate  `async` function or something in the real world\ntry {\n  const user = await updateUserEmail(\"kyle@example.com\", \"kyle2@example.com\");\n  console.log(user);\n} catch (error) {\n  console.error(error);\n}\n```\n\nAnd that's that! Now you've seen a few practical examples of asynchronous code and how JavaScript is equipped to handle these use cases. In modern JavaScript, it's helpful to have an understanding of each of these async patterns and how they relate to one another. `async/await` is definitely the most modern approach to async code, but you'll still run into plenty of callbacks, and having a good understanding of `Promises` is important to effectively utilize `async/await`.\n\n## Further Reading\n\n- https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\n",
    "html": "<p>JavaScript is regularly referred to as \"async by default\", but the way in which async code is commonly handled has changed over JavaScript's lifetime. We've moved from <strong>callbacks</strong> to <strong>promises</strong> to <strong>async/await</strong> over the years, but each of these approaches in related to its predecessors in one way or another.</p>\n<h2>Asynchronous vs Synchronous</h2>\n<p>To begin, let's quickly make clear the difference between asynchronous and synchronous code. When code is synchronous, it's executed in \"line order\", meaning each task defined by your code is executed to completion before moving onto the next task. In JavaScript, that might mean something like this.</p>\n<pre><code class=\"language-js\">console.log(\"Hello world\");\n\nconst name = \"kyle\";\nconsole.log(\"It's me, \" + name);\n\nconsole.log(\"Some lovely code :)\");\n</code></pre>\n<p>All of this code executes synchronously - each line is executed to completion before the program moves to the next line.</p>\n<p>Asynchronous programming works in the opposite way though: the program moves to the next line <em>before</em> the previous line has executed to completion. We'll dig into some example throughout this post, but common cases involving asynchronous code are database connections, HTTP requests, and other instances where your program might have to wait for a response from some other source.</p>\n<p>Here's a great <a href=\"https://stackoverflow.com/questions/748175/asynchronous-vs-synchronous-execution-what-does-it-really-mean/26804844#26804844\">StackOverflow</a> answer that does a good ELI5 for the difference:</p>\n<blockquote>\n<p>SYNCHRONOUS \nYou are in a queue to get a movie ticket. You cannot get one until everybody in front of you gets one, and the same applies to the people queued behind you.  \nASYNCHRONOUS \nYou are in a restaurant with many other people. You order your food. Other people can also order their food, they don't have to wait for your food to be cooked and served to you before they can order. In the kitchen restaurant workers are continuously cooking, serving, and taking orders. People will get their food served as soon as it is cooked. </p>\n</blockquote>\n<p>With (hopefully) a good baseline understanding of these programming concepts, let's dive into how JavaScript has handled asynchronous code throughout its lifetime as a programming language.</p>\n<h2>Callbacks</h2>\n<p>Callbacks are an essential concept in JavaScript and other asynchronous languages. Because JavaScript relies heavily on event and asynchronous processing, callbacks are core to the language. JavaScript implements <a href=\"https://eloquentjavascript.net/05_higher_order.html#h_xxCc98lOBK\">higher order functions</a>, meaning that functions can be stored in named variables and passed as arguments to other functions. A function passed as an argument to another function is typically referred to as a callback. Callbacks are the original and oldest way to handle async calls in JavaScript.</p>\n<p><code>setTimeout</code> is one of the simplest examples of a function that accepts a callback:</p>\n<pre><code class=\"language-js\">setTimeout(function () {\n  console.log(\"It has been a second!\");\n}, 1000);\n</code></pre>\n<p>Here's an example of how you might implement your own method that accepts a callback:</p>\n<pre><code class=\"language-js\">function validateInput(input, callback) {\n  var result = { errors: [] };\n\n  if (!input.name || input.name.length &#x3C; 6) {\n    result.errors.push(\"Invalid name\");\n  }\n\n  if (!input.email) {\n    result.errors.push(\"Email must be provided\");\n  }\n\n  callback(result);\n}\n\nvalidateInput({ name: \"Kyle\", email: \"kyle@example.com\" }, function (result) {\n  if (result.errors.length) {\n    console.error(\"Whoops\");\n  } else {\n    console.log(\"Hooray\");\n  }\n});\n</code></pre>\n<p>It's very easy to fall into <a href=\"http://callbackhell.com/\">\"callback hell\"</a> when you have to chain several functions together that all accept callbacks. Consider some Node code where we connect to MySQL and use standard callbacks to run some queries that depend on return values from other queries.</p>\n<pre><code class=\"language-js\">var config = require('./config.json')\nvar mysql = require('mysql')\n\n// Note: this is inefficient and bad on purpose to prove a point :)\nfunction updateUserEmail (oldEmail, newEmail, callback) {\n  var connection = mysql.createConnection(config)\n\n  connection.connect()\n\n  connection.query('SELECT id FROM users WHERE email = ?', [oldEmail], function (error, results) {\n    if (error) {\n      throw(error)\n    }\n\n    var userId = results[0].id\n\n    connection.query('SELECT is_active FROM users WHERE user_id = ?', [userId], function (error, results) {\n      if (error) {\n        throw(error)\n      }\n\n      var isActive = results[0].is_active\n\n      if (!isActive) {\n        throw new Error('Error - user is inactive')\n      }\n\n      connection.query('UPDATE users SET email = ? WHERE id = ?', [newEmail, userId], function (error, results) {\n        if (error) {\n          throw(error)\n        }\n\n        if (results[0].affectedRows === 0) {\n          throw new Error('Error - failed to update user')\n        }\n\n        connection.query('SELECT * FROM users WHERE id = ?' [userId], function (error, results) {\n          if (error) {\n            throw(error)\n          }\n\n          callback(results[0])\n        })\n      })\n    }\n  })\n\n  connection.end()\n}\n\ntry {\n  updateUserEmail('kyle@example.com', 'kyle2@example.com', function(changedUser) {\n    console.log(changedUser)\n  })\n} catch (error) {\n  console.error(error)\n}\n</code></pre>\n<h2>Promises</h2>\n<p>A <code>Promise</code> is an object that represents the eventual result of an async operation. Promises can be <code>resolved</code> or <code>rejected</code> with values, and they're similar to <code>Tasks</code> or <code>Futures</code> in other languages like C# or Java.</p>\n<p>We can instantiate a <code>Promise</code> with a constructor that takes a function like so</p>\n<pre><code class=\"language-js\">new Promise((resolve, reject) => {\n  if (foo) {\n    return resolve(\"foo\");\n  }\n\n  reject(\"not foo\");\n});\n</code></pre>\n<p>Promises transition through three states: <code>pending</code>, <code>fulfilled</code>, and <code>rejected</code>. We can chain onto Promises to perform meaningful operations with the <code>then</code> method. The <code>catch</code> method is used to catch rejections.</p>\n<pre><code class=\"language-js\">somePromise(foo)\n  .then((data) => {\n    console.log(data);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n</code></pre>\n<p>Promises can be chained, and errors will \"bubble up\" to a single <code>catch</code> handler at the end, which makes them very powerful for reducing nesting and unifying your scope.</p>\n<pre><code class=\"language-js\">somePromise(foo)\n  .then((data) => {\n    return transformData(data);\n  })\n  .then((newData) => {\n    if (newData.bar) {\n      return logData(newData);\n    }\n\n    return logSomethingElse(newData);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n</code></pre>\n<p>Promises are a powerful pattern for cleaning up callback-laden code. Here's the example with the MySQL calls from above rewritten with Promises.</p>\n<pre><code class=\"language-js\">const config = require('./config.json')\nconst mysql = require('mysql2/promise')\n\nfunction updateUserEmail (oldEmail, newEmail ) {\n  mysql.createConnection(config)\n    .then(connection => connection.execute('SELECT id FROM users WHERE email = ?', [oldEmail])\n    .then([{ id }] => {\n      this.userId = id\n\n      return connection.execute('SELECT is_active FROM users WHERE user_id = ?', [userId])\n    })\n    .then([{ is_active }] => {\n      if (!is_active) {\n        throw new Error('Error - user is inactive')\n      }\n\n      return connection.execute('UPDATE users SET email = ? WHERE id = ?', [newEmail. this.userId])\n    })\n    .then(() => connection.execute('SELECT * FROM users WHERE id = ?', [this.userId])\n    .then([user] => user)\n}\n\nupdateUserEmail('kyle@example.com', 'kyle2@example.com')\n  .then(changedUser => console.log(changedUser))\n  .catch(error => console.error(error))\n</code></pre>\n<h2>Async/Await</h2>\n<p>Async/Await is a layer of syntactic sugar on top of Promises that eliminates another layer of nesting. By marking a function as <code>async</code>, we gain access to the <code>await</code> keyword. <code>await</code> lets us \"unwrap\" Promises inline, and treat pending Promises as if they were resolved synchronously. You can <em>only</em> <code>await</code> functions that return Promises. If you <code>await</code> a function that does not return a <code>Promise</code>, it's result will be wrapped in a <code>Promise.resolve</code> call.</p>\n<pre><code class=\"language-js\">// With a Promise\nfunction getData() {\n  return fetch(\"example.com/api/data\")\n    .then((body) => body.json())\n    .then((data) => console.log(JSON.stringify(data)));\n}\n\n// With async/await\nasync function getData() {\n  const body = await fetch(\"example.com/api/data\");\n  const data = await body.json();\n\n  console.log(JSON.stringify(data));\n}\n</code></pre>\n<p>Catching errors in async/await blocks is a matter of using JavaScript's standard <code>try/catch</code> construct. Similar to Promises, this error will \"bubble up\", so you only need one <code>catch</code> block for a given block of async code.</p>\n<pre><code class=\"language-js\">async function getData() {\n  try {\n    const body = await fetch(\"example.com/api/data\");\n    const data = await body.json();\n\n    console.log(JSON.stringify(data));\n  } catch (error) {\n    console.error(error);\n  }\n}\n</code></pre>\n<p>Here's our MySQL example rewritten with async/await. By leveraging libraries and interfaces that return Promises (like MySQL2), you can wind up with some really concise async code.</p>\n<pre><code class=\"language-js\">const config = require(\"./config.json\");\nconst mysql = require(\"mysql2/promise\");\n\nasync function updateUserEmail(oldEmail, newEmail) {\n  const connection = await mysql.createConnection(config);\n\n  const userId = (await connection.execute(\"SELECT id FROM users WHERE email = ?\", [oldEmail]))[0]\n    .id;\n\n  const isActive = await connection.execute(\"SELECT is_active FROM users WHERE user_id = ?\", [\n    userId,\n  ])[0].is_active;\n\n  await connection.execute(\"UPDATE users SET email = ? WHERE id = ?\", [newEmail.userId]);\n\n  return (await connection.execute(\"SELECT * FROM users WHERE id = ?\", [this.userId]))[0];\n}\n\n// You actually can't use `await` in the top level scope, so you'd need to put this\n// into a separate  `async` function or something in the real world\ntry {\n  const user = await updateUserEmail(\"kyle@example.com\", \"kyle2@example.com\");\n  console.log(user);\n} catch (error) {\n  console.error(error);\n}\n</code></pre>\n<p>And that's that! Now you've seen a few practical examples of asynchronous code and how JavaScript is equipped to handle these use cases. In modern JavaScript, it's helpful to have an understanding of each of these async patterns and how they relate to one another. <code>async/await</code> is definitely the most modern approach to async code, but you'll still run into plenty of callbacks, and having a good understanding of <code>Promises</code> is important to effectively utilize <code>async/await</code>.</p>\n<h2>Further Reading</h2>\n<ul>\n<li>https://developer.mozilla.org/en-US/docs/Glossary/Callback_function</li>\n<li>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</li>\n<li>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function</li>\n</ul>"
  },
  "_id": "async-patterns-in-js.md",
  "_raw": {
    "sourceFilePath": "async-patterns-in-js.md",
    "sourceFileName": "async-patterns-in-js.md",
    "sourceFileDir": ".",
    "contentType": "markdown",
    "flattenedPath": "async-patterns-in-js"
  },
  "type": "Post",
  "url": "/blog/async-patterns-in-js"
}