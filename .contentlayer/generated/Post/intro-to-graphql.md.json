{
  "title": "Intro to GraphQL",
  "subtitle": "A look at the core concepts of Facebook's API query language",
  "date": "2018-03-28T04:00:00.000Z",
  "body": {
    "raw": "\nWhen I first heard about GraphQL, I was unconvinced about its usefulness or applicability to the way I write web applications. I had a good grasp on RESTful API design and implementation, and GraphQL didn't seem like something I'd really \"need\". Having had a bit more exposure to GraphQL, though, I'm really starting to see a lot of the benefits of the technology. In this post, I'll try to outline some of the core concepts of GraphQL, and to explain the problems it seeks to solve.\n\n## What is it?\n\nHere's what the official GraphQL website has to say:\n\n> GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.\n\nLet's break this down into pieces and elaborate a little bit.\n\n### A Query Language\n\nGraphQL is a query language much like SQL that allows clients or consumers of your API to request the data they need. Much like you'd `SELECT *` from some database table, you can run GraphQL queries and specify fields you'd like returned. The syntax of GraphQL looks a lot like JSON with only the left hand side filled in.\n\n```graphql\nquery getUser {\n  user(id: 1) {\n    email\n    firstName\n    lastName\n  }\n}\n```\n\n### Self Documenting and Versionless\n\nAt the heart of any GraphQL API is a strongly typed schema representing all of your data types, relationships, and queries. This schema serves as an annoted source of documentation around all operations and fields defined by your API. GraphQL also has first class support for gracefully deprecating specific fields and queries, so you can iterate on your API without disrupting your client applications.\n\n### Powerful Developer Tools\n\nOne of the biggest reasons I've boarded the GraphQL hype train is [graphiql](https://github.com/graphql/graphiql), an in-browser IDE for GraphQL APIs. Graphiql provides an extremely compelling development experience for exploring, working with, and developing GraphQL APIs. I cannot understand how much of a pleasure this application is to work with. Seriously, graphiql alone is make recommending GraphQL for your next API seem reasonable.\n\n## Why does it exist?\n\nOne of the things I think developers often gloss over when presenting or exploring new technology is the \"why\" behind the technology. Knowing what problems a language or library exists to solve or what it seeks to improve are powerful tools in understanding the technology itself.\n\nGraphQL's primary purpose is to reduce the number of network calls required to interface with your API. If you've ever worked with an API that required you to make one request, and then to use some data from that response to make another N requests, this is a problem GraphQL seeks to solve. By allowing clients the ability to request nested data structures or even run multiple queries in a single request, network overhead can be grealy reduced. In today's landscape of mobile devices and potentially limited network connectivity, reducing network overhead is crucial for providing a globally high quality experience in your applications.\n\nNow, you might be saying \"wasn't this possible with REST before?\" and you'd be right about that. Yes - it has been possible to provide nested data structures and sparse field sets with REST using headers or query strings or unique endpoints. However, that's just the issue. Any time a new requirement arises around data structure or response format, it requires developing a new endpoint or implementing a new query string. This introduces friction and implementation cost to your API and your clients. By using a GraphQL schema, you can allow your clients to define their data requirements on their own, and avoid friction in the form of custom endpoints and parameters.\n\nGraphQL also reduces friction around API versioning and deprecation. Rather than maintaining multiple API versions, you can use GraphQL's `deprecated` directive to provide your clients with a warning and descriptive message when fields are deprecated. This is much more graceful than managing API documentation or actively supporting multiple API versions. You can also add entirely new fields and relationships without disrupting existing clients, since their queries will continue to work as expected regardless of new fields, types, or queries existing.\n\n## Core Concepts\n\nNow that we've got some background on GraphQL, it's time to dive into the core concepts that drive it.\n\n### Types\n\nGraphQL is a strongly typed language, so it includes a simple but powerful type system for creating your schema.\n\n#### Scalar Types\n\nGraphQL has several natively available primitive types:\n\n- String\n- Int\n- Float\n- Boolean\n- ID\n\nEverything here should be familiar to you if you've worked with most common programming languages, but the `ID` field is slightly unique. In GraphQL, a field of type `ID` denotes a unique identifier that is not intended to be human readable - like a UUID string.\n\n#### Object Types\n\nGraphQL object types are how you can define custom data structures within your schema. A User type might look something like this:\n\n```graphql\ntype User {\n  id: Int!\n  email: String!\n  firstName: String\n  lastName: String\n}\n```\n\nOnce we've defined this type in our schema, we can reference it anywhere as a type. Queries can return a `User`, fields can be of type `User`, and so forth.\n\nThe `!` syntax above denotes a given field as required.\n\n#### Lists\n\nA field can be defined as a `list` using square brackets `[]` around the type of the list. This is similar to the `List<string>` syntax in languages like Java or C# for example. In practice, this might look something like this:\n\n```graphql\ntype User {\n  id: Int!\n  email: String!\n  firstName: String\n  lastName: String\n  friends: [User!]!\n}\n```\n\nThe double `!` syntax here is something you'll see often in GraphQL list fields. What we're doing here is saying \"friends is a _required_ list of Users, where each element is non-null.\" So the list itself cannot be null, and each element of the list also cannot be null.\n\n#### Other types\n\nThere are some other GraphQL types like interfaces, unions, and enums that exist, but they're a little more advanced and not entirely necessary to get up and running with a basic GraphQL schema. You can set up inheritance structures and more advanced validation schemes with these structures, but they're outside of the scope of this basic introduction.\n\n### Queries\n\nQueries are named methods for fetching data. Your schema defines a set of queries, then any client or consumer of your API will be able to run those queries. Queries look a lot like functions in a typical programming language. They have arguments and a return type. Here's a sample query for fetching our `User` type by ID.\n\n```graphql\nquery getUserById(id: Int!) : User!\n```\n\nThen, as a client, I can call this query like so:\n\n```graphql\n{\n  getUserById(id: 1234) {\n    email\n  }\n}\n```\n\nWhen running the query, I can select only the fields I need to fulfill my needs. This is where GraphQL reduces network overhead and provides flexibility to its consumers.\n\n### Mutations\n\nMutations function almost indentically to queries, except that they result in data changes. While queries are used for the (R)ead part of CRUD, mutations power the (C)reate, (U)pdate, and (D)elete operations. To define a \"create\" action for our User type, we could define and run a mutation like so:\n\n```graphql\n# Definition\nmutation createUser(email: String!, password: String!): User!\n\n# Running the mutation\n{\n  mutation createUser(email: \"test@test.com\", password: \"password123\") {\n   id\n  }\n}\n```\n\n### Resolvers\n\nResolvers are function that tell your GraphQL server how to fulfill requests. They are the implementation of the logic behind queries and mutations. The great thing about resolvers is that they are totally agnostic of your programming language and data source. As long as your resolver returns a data structure that maps properly to your GraphQL schema, you're all set. There are all sorts of server-side GraphQL implementations for Python, Ruby, Node, C#, or whatever language you prefer.\n\nMy typical server-side language of choice is Node, so here's what a Node resolver might look like:\n\n```js\nconst UserResolver = {\n  Query: {\n    getPlayer(parent, arguments, context) {\n      const { id } = arguments;\n\n      return context.models.User.findOne({ where: { id } });\n    },\n  },\n};\n```\n\nThis resolver structure is one defined by a common server-side GraphQL environment [Apollo Server](https://www.apollographql.com/docs/graphql-tools/resolvers.html), but you can see how we might build out this structure to define function calls and business logic for each query defined in our schema.\n\n## Getting Started\n\nIf this introduction to GraphQL has you excited and ready to try things out, definitely head over to [Apollo Launchpad](https://launchpad.graphql.com/new) and get started with an interactive GraphQL sandbox environment. The official [GraphQL](https://graphql.org/) website has a fantastic, detailed [introduction](https://graphql.org/learn/) document as well that goes much more in depth that what we covered here. [Apollo's website](https://www.apollographql.com/) in general also has some great tooling around GraphQL and blog content, too.\n\nThe best way to get into GraphQL and to understand is definitely to build something, so go get your hands dirty with a Twitter clone or a to-do app or something with craft beer like every other developer!\n",
    "html": "<p>When I first heard about GraphQL, I was unconvinced about its usefulness or applicability to the way I write web applications. I had a good grasp on RESTful API design and implementation, and GraphQL didn't seem like something I'd really \"need\". Having had a bit more exposure to GraphQL, though, I'm really starting to see a lot of the benefits of the technology. In this post, I'll try to outline some of the core concepts of GraphQL, and to explain the problems it seeks to solve.</p>\n<h2>What is it?</h2>\n<p>Here's what the official GraphQL website has to say:</p>\n<blockquote>\n<p>GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.</p>\n</blockquote>\n<p>Let's break this down into pieces and elaborate a little bit.</p>\n<h3>A Query Language</h3>\n<p>GraphQL is a query language much like SQL that allows clients or consumers of your API to request the data they need. Much like you'd <code>SELECT *</code> from some database table, you can run GraphQL queries and specify fields you'd like returned. The syntax of GraphQL looks a lot like JSON with only the left hand side filled in.</p>\n<pre><code class=\"language-graphql\">query getUser {\n  user(id: 1) {\n    email\n    firstName\n    lastName\n  }\n}\n</code></pre>\n<h3>Self Documenting and Versionless</h3>\n<p>At the heart of any GraphQL API is a strongly typed schema representing all of your data types, relationships, and queries. This schema serves as an annoted source of documentation around all operations and fields defined by your API. GraphQL also has first class support for gracefully deprecating specific fields and queries, so you can iterate on your API without disrupting your client applications.</p>\n<h3>Powerful Developer Tools</h3>\n<p>One of the biggest reasons I've boarded the GraphQL hype train is <a href=\"https://github.com/graphql/graphiql\">graphiql</a>, an in-browser IDE for GraphQL APIs. Graphiql provides an extremely compelling development experience for exploring, working with, and developing GraphQL APIs. I cannot understand how much of a pleasure this application is to work with. Seriously, graphiql alone is make recommending GraphQL for your next API seem reasonable.</p>\n<h2>Why does it exist?</h2>\n<p>One of the things I think developers often gloss over when presenting or exploring new technology is the \"why\" behind the technology. Knowing what problems a language or library exists to solve or what it seeks to improve are powerful tools in understanding the technology itself.</p>\n<p>GraphQL's primary purpose is to reduce the number of network calls required to interface with your API. If you've ever worked with an API that required you to make one request, and then to use some data from that response to make another N requests, this is a problem GraphQL seeks to solve. By allowing clients the ability to request nested data structures or even run multiple queries in a single request, network overhead can be grealy reduced. In today's landscape of mobile devices and potentially limited network connectivity, reducing network overhead is crucial for providing a globally high quality experience in your applications.</p>\n<p>Now, you might be saying \"wasn't this possible with REST before?\" and you'd be right about that. Yes - it has been possible to provide nested data structures and sparse field sets with REST using headers or query strings or unique endpoints. However, that's just the issue. Any time a new requirement arises around data structure or response format, it requires developing a new endpoint or implementing a new query string. This introduces friction and implementation cost to your API and your clients. By using a GraphQL schema, you can allow your clients to define their data requirements on their own, and avoid friction in the form of custom endpoints and parameters.</p>\n<p>GraphQL also reduces friction around API versioning and deprecation. Rather than maintaining multiple API versions, you can use GraphQL's <code>deprecated</code> directive to provide your clients with a warning and descriptive message when fields are deprecated. This is much more graceful than managing API documentation or actively supporting multiple API versions. You can also add entirely new fields and relationships without disrupting existing clients, since their queries will continue to work as expected regardless of new fields, types, or queries existing.</p>\n<h2>Core Concepts</h2>\n<p>Now that we've got some background on GraphQL, it's time to dive into the core concepts that drive it.</p>\n<h3>Types</h3>\n<p>GraphQL is a strongly typed language, so it includes a simple but powerful type system for creating your schema.</p>\n<h4>Scalar Types</h4>\n<p>GraphQL has several natively available primitive types:</p>\n<ul>\n<li>String</li>\n<li>Int</li>\n<li>Float</li>\n<li>Boolean</li>\n<li>ID</li>\n</ul>\n<p>Everything here should be familiar to you if you've worked with most common programming languages, but the <code>ID</code> field is slightly unique. In GraphQL, a field of type <code>ID</code> denotes a unique identifier that is not intended to be human readable - like a UUID string.</p>\n<h4>Object Types</h4>\n<p>GraphQL object types are how you can define custom data structures within your schema. A User type might look something like this:</p>\n<pre><code class=\"language-graphql\">type User {\n  id: Int!\n  email: String!\n  firstName: String\n  lastName: String\n}\n</code></pre>\n<p>Once we've defined this type in our schema, we can reference it anywhere as a type. Queries can return a <code>User</code>, fields can be of type <code>User</code>, and so forth.</p>\n<p>The <code>!</code> syntax above denotes a given field as required.</p>\n<h4>Lists</h4>\n<p>A field can be defined as a <code>list</code> using square brackets <code>[]</code> around the type of the list. This is similar to the <code>List&#x3C;string></code> syntax in languages like Java or C# for example. In practice, this might look something like this:</p>\n<pre><code class=\"language-graphql\">type User {\n  id: Int!\n  email: String!\n  firstName: String\n  lastName: String\n  friends: [User!]!\n}\n</code></pre>\n<p>The double <code>!</code> syntax here is something you'll see often in GraphQL list fields. What we're doing here is saying \"friends is a <em>required</em> list of Users, where each element is non-null.\" So the list itself cannot be null, and each element of the list also cannot be null.</p>\n<h4>Other types</h4>\n<p>There are some other GraphQL types like interfaces, unions, and enums that exist, but they're a little more advanced and not entirely necessary to get up and running with a basic GraphQL schema. You can set up inheritance structures and more advanced validation schemes with these structures, but they're outside of the scope of this basic introduction.</p>\n<h3>Queries</h3>\n<p>Queries are named methods for fetching data. Your schema defines a set of queries, then any client or consumer of your API will be able to run those queries. Queries look a lot like functions in a typical programming language. They have arguments and a return type. Here's a sample query for fetching our <code>User</code> type by ID.</p>\n<pre><code class=\"language-graphql\">query getUserById(id: Int!) : User!\n</code></pre>\n<p>Then, as a client, I can call this query like so:</p>\n<pre><code class=\"language-graphql\">{\n  getUserById(id: 1234) {\n    email\n  }\n}\n</code></pre>\n<p>When running the query, I can select only the fields I need to fulfill my needs. This is where GraphQL reduces network overhead and provides flexibility to its consumers.</p>\n<h3>Mutations</h3>\n<p>Mutations function almost indentically to queries, except that they result in data changes. While queries are used for the (R)ead part of CRUD, mutations power the (C)reate, (U)pdate, and (D)elete operations. To define a \"create\" action for our User type, we could define and run a mutation like so:</p>\n<pre><code class=\"language-graphql\"># Definition\nmutation createUser(email: String!, password: String!): User!\n\n# Running the mutation\n{\n  mutation createUser(email: \"test@test.com\", password: \"password123\") {\n   id\n  }\n}\n</code></pre>\n<h3>Resolvers</h3>\n<p>Resolvers are function that tell your GraphQL server how to fulfill requests. They are the implementation of the logic behind queries and mutations. The great thing about resolvers is that they are totally agnostic of your programming language and data source. As long as your resolver returns a data structure that maps properly to your GraphQL schema, you're all set. There are all sorts of server-side GraphQL implementations for Python, Ruby, Node, C#, or whatever language you prefer.</p>\n<p>My typical server-side language of choice is Node, so here's what a Node resolver might look like:</p>\n<pre><code class=\"language-js\">const UserResolver = {\n  Query: {\n    getPlayer(parent, arguments, context) {\n      const { id } = arguments;\n\n      return context.models.User.findOne({ where: { id } });\n    },\n  },\n};\n</code></pre>\n<p>This resolver structure is one defined by a common server-side GraphQL environment <a href=\"https://www.apollographql.com/docs/graphql-tools/resolvers.html\">Apollo Server</a>, but you can see how we might build out this structure to define function calls and business logic for each query defined in our schema.</p>\n<h2>Getting Started</h2>\n<p>If this introduction to GraphQL has you excited and ready to try things out, definitely head over to <a href=\"https://launchpad.graphql.com/new\">Apollo Launchpad</a> and get started with an interactive GraphQL sandbox environment. The official <a href=\"https://graphql.org/\">GraphQL</a> website has a fantastic, detailed <a href=\"https://graphql.org/learn/\">introduction</a> document as well that goes much more in depth that what we covered here. <a href=\"https://www.apollographql.com/\">Apollo's website</a> in general also has some great tooling around GraphQL and blog content, too.</p>\n<p>The best way to get into GraphQL and to understand is definitely to build something, so go get your hands dirty with a Twitter clone or a to-do app or something with craft beer like every other developer!</p>"
  },
  "_id": "intro-to-graphql.md",
  "_raw": {
    "sourceFilePath": "intro-to-graphql.md",
    "sourceFileName": "intro-to-graphql.md",
    "sourceFileDir": ".",
    "contentType": "markdown",
    "flattenedPath": "intro-to-graphql"
  },
  "type": "Post",
  "url": "/blog/intro-to-graphql"
}